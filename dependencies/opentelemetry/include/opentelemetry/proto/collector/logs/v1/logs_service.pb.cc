// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/collector/logs/v1/logs_service.proto

#include "opentelemetry/proto/collector/logs/v1/logs_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {
class ExportLogsServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExportLogsServiceRequest> _instance;
} _ExportLogsServiceRequest_default_instance_;
class ExportLogsServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExportLogsServiceResponse> _instance;
} _ExportLogsServiceResponse_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceRequest_default_instance_;
    new (ptr) ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto}, {
      &scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,}};

static void InitDefaultsscc_info_ExportLogsServiceResponse_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceResponse_default_instance_;
    new (ptr) ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExportLogsServiceResponse_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExportLogsServiceResponse_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest, resource_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest)},
  { 6, -1, sizeof(::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::collector::logs::v1::_ExportLogsServiceResponse_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8opentelemetry/proto/collector/logs/v1/"
  "logs_service.proto\022%opentelemetry.proto."
  "collector.logs.v1\032&opentelemetry/proto/l"
  "ogs/v1/logs.proto\"\\\n\030ExportLogsServiceRe"
  "quest\022@\n\rresource_logs\030\001 \003(\0132).opentelem"
  "etry.proto.logs.v1.ResourceLogs\"\033\n\031Expor"
  "tLogsServiceResponse2\235\001\n\013LogsService\022\215\001\n"
  "\006Export\022\?.opentelemetry.proto.collector."
  "logs.v1.ExportLogsServiceRequest\032@.opent"
  "elemetry.proto.collector.logs.v1.ExportL"
  "ogsServiceResponse\"\000B\206\001\n(io.opentelemetr"
  "y.proto.collector.logs.v1B\020LogsServicePr"
  "otoP\001ZFgithub.com/open-telemetry/opentel"
  "emetry-proto/gen/go/collector/logs/v1b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_deps[1] = {
  &::descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_sccs[2] = {
  &scc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.base,
  &scc_info_ExportLogsServiceResponse_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, "opentelemetry/proto/collector/logs/v1/logs_service.proto", 565,
  &descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_once, descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, 2, file_level_enum_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {

// ===================================================================

class ExportLogsServiceRequest::_Internal {
 public:
};

void ExportLogsServiceRequest::clear_resource_logs() {
  resource_logs_.Clear();
}
ExportLogsServiceRequest::ExportLogsServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
}
ExportLogsServiceRequest::ExportLogsServiceRequest(const ExportLogsServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_logs_(from.resource_logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
}

void ExportLogsServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.base);
}

ExportLogsServiceRequest::~ExportLogsServiceRequest() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportLogsServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExportLogsServiceRequest::ArenaDtor(void* object) {
  ExportLogsServiceRequest* _this = reinterpret_cast< ExportLogsServiceRequest* >(object);
  (void)_this;
}
void ExportLogsServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportLogsServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportLogsServiceRequest& ExportLogsServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExportLogsServiceRequest_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExportLogsServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportLogsServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportLogsServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  return target;
}

size_t ExportLogsServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  total_size += 1UL * this->_internal_resource_logs_size();
  for (const auto& msg : this->resource_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportLogsServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportLogsServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportLogsServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
    MergeFrom(*source);
  }
}

void ExportLogsServiceRequest::MergeFrom(const ExportLogsServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_logs_.MergeFrom(from.resource_logs_);
}

void ExportLogsServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportLogsServiceRequest::CopyFrom(const ExportLogsServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportLogsServiceRequest::IsInitialized() const {
  return true;
}

void ExportLogsServiceRequest::InternalSwap(ExportLogsServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_logs_.InternalSwap(&other->resource_logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportLogsServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExportLogsServiceResponse::_Internal {
 public:
};

ExportLogsServiceResponse::ExportLogsServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
}
ExportLogsServiceResponse::ExportLogsServiceResponse(const ExportLogsServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
}

void ExportLogsServiceResponse::SharedCtor() {
}

ExportLogsServiceResponse::~ExportLogsServiceResponse() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExportLogsServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExportLogsServiceResponse::ArenaDtor(void* object) {
  ExportLogsServiceResponse* _this = reinterpret_cast< ExportLogsServiceResponse* >(object);
  (void)_this;
}
void ExportLogsServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportLogsServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportLogsServiceResponse& ExportLogsServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExportLogsServiceResponse_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ExportLogsServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportLogsServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportLogsServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  return target;
}

size_t ExportLogsServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportLogsServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportLogsServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportLogsServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
    MergeFrom(*source);
  }
}

void ExportLogsServiceResponse::MergeFrom(const ExportLogsServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExportLogsServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportLogsServiceResponse::CopyFrom(const ExportLogsServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportLogsServiceResponse::IsInitialized() const {
  return true;
}

void ExportLogsServiceResponse::InternalSwap(ExportLogsServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportLogsServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest* Arena::CreateMaybeMessage< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse* Arena::CreateMaybeMessage< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
