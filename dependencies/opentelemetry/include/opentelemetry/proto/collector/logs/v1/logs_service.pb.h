// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/collector/logs/v1/logs_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/logs/v1/logs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto;
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {
class ExportLogsServiceRequest;
class ExportLogsServiceRequestDefaultTypeInternal;
extern ExportLogsServiceRequestDefaultTypeInternal _ExportLogsServiceRequest_default_instance_;
class ExportLogsServiceResponse;
class ExportLogsServiceResponseDefaultTypeInternal;
extern ExportLogsServiceResponseDefaultTypeInternal _ExportLogsServiceResponse_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest* Arena::CreateMaybeMessage<::opentelemetry::proto::collector::logs::v1::ExportLogsServiceRequest>(Arena*);
template<> ::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse* Arena::CreateMaybeMessage<::opentelemetry::proto::collector::logs::v1::ExportLogsServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace collector {
namespace logs {
namespace v1 {

// ===================================================================

class ExportLogsServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest) */ {
 public:
  inline ExportLogsServiceRequest() : ExportLogsServiceRequest(nullptr) {}
  virtual ~ExportLogsServiceRequest();

  ExportLogsServiceRequest(const ExportLogsServiceRequest& from);
  ExportLogsServiceRequest(ExportLogsServiceRequest&& from) noexcept
    : ExportLogsServiceRequest() {
    *this = ::std::move(from);
  }

  inline ExportLogsServiceRequest& operator=(const ExportLogsServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportLogsServiceRequest& operator=(ExportLogsServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportLogsServiceRequest& default_instance();

  static inline const ExportLogsServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ExportLogsServiceRequest*>(
               &_ExportLogsServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExportLogsServiceRequest& a, ExportLogsServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportLogsServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportLogsServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportLogsServiceRequest* New() const final {
    return CreateMaybeMessage<ExportLogsServiceRequest>(nullptr);
  }

  ExportLogsServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportLogsServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportLogsServiceRequest& from);
  void MergeFrom(const ExportLogsServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportLogsServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest";
  }
  protected:
  explicit ExportLogsServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceLogsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
  int resource_logs_size() const;
  private:
  int _internal_resource_logs_size() const;
  public:
  void clear_resource_logs();
  ::opentelemetry::proto::logs::v1::ResourceLogs* mutable_resource_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >*
      mutable_resource_logs();
  private:
  const ::opentelemetry::proto::logs::v1::ResourceLogs& _internal_resource_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ResourceLogs* _internal_add_resource_logs();
  public:
  const ::opentelemetry::proto::logs::v1::ResourceLogs& resource_logs(int index) const;
  ::opentelemetry::proto::logs::v1::ResourceLogs* add_resource_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >&
      resource_logs() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs > resource_logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ExportLogsServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse) */ {
 public:
  inline ExportLogsServiceResponse() : ExportLogsServiceResponse(nullptr) {}
  virtual ~ExportLogsServiceResponse();

  ExportLogsServiceResponse(const ExportLogsServiceResponse& from);
  ExportLogsServiceResponse(ExportLogsServiceResponse&& from) noexcept
    : ExportLogsServiceResponse() {
    *this = ::std::move(from);
  }

  inline ExportLogsServiceResponse& operator=(const ExportLogsServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportLogsServiceResponse& operator=(ExportLogsServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportLogsServiceResponse& default_instance();

  static inline const ExportLogsServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ExportLogsServiceResponse*>(
               &_ExportLogsServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExportLogsServiceResponse& a, ExportLogsServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportLogsServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportLogsServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportLogsServiceResponse* New() const final {
    return CreateMaybeMessage<ExportLogsServiceResponse>(nullptr);
  }

  ExportLogsServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportLogsServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportLogsServiceResponse& from);
  void MergeFrom(const ExportLogsServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportLogsServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse";
  }
  protected:
  explicit ExportLogsServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExportLogsServiceRequest

// repeated .opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
inline int ExportLogsServiceRequest::_internal_resource_logs_size() const {
  return resource_logs_.size();
}
inline int ExportLogsServiceRequest::resource_logs_size() const {
  return _internal_resource_logs_size();
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* ExportLogsServiceRequest::mutable_resource_logs(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resource_logs)
  return resource_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >*
ExportLogsServiceRequest::mutable_resource_logs() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resource_logs)
  return &resource_logs_;
}
inline const ::opentelemetry::proto::logs::v1::ResourceLogs& ExportLogsServiceRequest::_internal_resource_logs(int index) const {
  return resource_logs_.Get(index);
}
inline const ::opentelemetry::proto::logs::v1::ResourceLogs& ExportLogsServiceRequest::resource_logs(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resource_logs)
  return _internal_resource_logs(index);
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* ExportLogsServiceRequest::_internal_add_resource_logs() {
  return resource_logs_.Add();
}
inline ::opentelemetry::proto::logs::v1::ResourceLogs* ExportLogsServiceRequest::add_resource_logs() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resource_logs)
  return _internal_add_resource_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::logs::v1::ResourceLogs >&
ExportLogsServiceRequest::resource_logs() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resource_logs)
  return resource_logs_;
}

// -------------------------------------------------------------------

// ExportLogsServiceResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace logs
}  // namespace collector
}  // namespace proto
}  // namespace opentelemetry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fcollector_2flogs_2fv1_2flogs_5fservice_2eproto
