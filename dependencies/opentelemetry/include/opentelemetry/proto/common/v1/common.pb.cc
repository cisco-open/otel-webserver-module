// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/common/v1/common.proto

#include "opentelemetry/proto/common/v1/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {
class AnyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyValue> _instance;
} _AnyValue_default_instance_;
class ArrayValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayValue> _instance;
} _ArrayValue_default_instance_;
class KeyValueListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValueList> _instance;
} _KeyValueList_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class StringKeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringKeyValue> _instance;
} _StringKeyValue_default_instance_;
class InstrumentationLibraryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentationLibrary> _instance;
} _InstrumentationLibrary_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::common::v1::_AnyValue_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::AnyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::opentelemetry::proto::common::v1::_ArrayValue_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::ArrayValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::opentelemetry::proto::common::v1::_KeyValueList_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::KeyValueList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::opentelemetry::proto::common::v1::_KeyValue_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::common::v1::_InstrumentationLibrary_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::InstrumentationLibrary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto}, {}};

static void InitDefaultsscc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::common::v1::_StringKeyValue_default_instance_;
    new (ptr) ::opentelemetry::proto::common::v1::StringKeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::ArrayValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::ArrayValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValueList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValueList, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::StringKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::StringKeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::StringKeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationLibrary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationLibrary, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationLibrary, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::common::v1::AnyValue)},
  { 12, -1, sizeof(::opentelemetry::proto::common::v1::ArrayValue)},
  { 18, -1, sizeof(::opentelemetry::proto::common::v1::KeyValueList)},
  { 24, -1, sizeof(::opentelemetry::proto::common::v1::KeyValue)},
  { 31, -1, sizeof(::opentelemetry::proto::common::v1::StringKeyValue)},
  { 38, -1, sizeof(::opentelemetry::proto::common::v1::InstrumentationLibrary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_AnyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_ArrayValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_KeyValueList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_StringKeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::common::v1::_InstrumentationLibrary_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*opentelemetry/proto/common/v1/common.p"
  "roto\022\035opentelemetry.proto.common.v1\"\365\001\n\010"
  "AnyValue\022\026\n\014string_value\030\001 \001(\tH\000\022\024\n\nbool"
  "_value\030\002 \001(\010H\000\022\023\n\tint_value\030\003 \001(\003H\000\022\026\n\014d"
  "ouble_value\030\004 \001(\001H\000\022@\n\013array_value\030\005 \001(\013"
  "2).opentelemetry.proto.common.v1.ArrayVa"
  "lueH\000\022C\n\014kvlist_value\030\006 \001(\0132+.openteleme"
  "try.proto.common.v1.KeyValueListH\000B\007\n\005va"
  "lue\"E\n\nArrayValue\0227\n\006values\030\001 \003(\0132\'.open"
  "telemetry.proto.common.v1.AnyValue\"G\n\014Ke"
  "yValueList\0227\n\006values\030\001 \003(\0132\'.opentelemet"
  "ry.proto.common.v1.KeyValue\"O\n\010KeyValue\022"
  "\013\n\003key\030\001 \001(\t\0226\n\005value\030\002 \001(\0132\'.openteleme"
  "try.proto.common.v1.AnyValue\",\n\016StringKe"
  "yValue\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"7\n\026In"
  "strumentationLibrary\022\014\n\004name\030\001 \001(\t\022\017\n\007ve"
  "rsion\030\002 \001(\tBq\n io.opentelemetry.proto.co"
  "mmon.v1B\013CommonProtoP\001Z>github.com/open-"
  "telemetry/opentelemetry-proto/gen/go/com"
  "mon/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_sccs[3] = {
  &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
  &scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
  &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto, "opentelemetry/proto/common/v1/common.proto", 774,
  &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_once, descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto, 6, file_level_enum_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {

// ===================================================================

class AnyValue::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::ArrayValue& array_value(const AnyValue* msg);
  static const ::opentelemetry::proto::common::v1::KeyValueList& kvlist_value(const AnyValue* msg);
};

const ::opentelemetry::proto::common::v1::ArrayValue&
AnyValue::_Internal::array_value(const AnyValue* msg) {
  return *msg->value_.array_value_;
}
const ::opentelemetry::proto::common::v1::KeyValueList&
AnyValue::_Internal::kvlist_value(const AnyValue* msg) {
  return *msg->value_.kvlist_value_;
}
void AnyValue::set_allocated_array_value(::opentelemetry::proto::common::v1::ArrayValue* array_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (array_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(array_value);
    if (message_arena != submessage_arena) {
      array_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, array_value, submessage_arena);
    }
    set_has_array_value();
    value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.array_value)
}
void AnyValue::set_allocated_kvlist_value(::opentelemetry::proto::common::v1::KeyValueList* kvlist_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (kvlist_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kvlist_value);
    if (message_arena != submessage_arena) {
      kvlist_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kvlist_value, submessage_arena);
    }
    set_has_kvlist_value();
    value_.kvlist_value_ = kvlist_value;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
}
AnyValue::AnyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.AnyValue)
}
AnyValue::AnyValue(const AnyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::opentelemetry::proto::common::v1::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kKvlistValue: {
      _internal_mutable_kvlist_value()->::opentelemetry::proto::common::v1::KeyValueList::MergeFrom(from._internal_kvlist_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.AnyValue)
}

void AnyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  clear_has_value();
}

AnyValue::~AnyValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.AnyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void AnyValue::ArenaDtor(void* object) {
  AnyValue* _this = reinterpret_cast< AnyValue* >(object);
  (void)_this;
}
void AnyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyValue& AnyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void AnyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.common.v1.AnyValue)
  switch (value_case()) {
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kArrayValue: {
      if (GetArena() == nullptr) {
        delete value_.array_value_;
      }
      break;
    }
    case kKvlistValue: {
      if (GetArena() == nullptr) {
        delete value_.kvlist_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void AnyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.AnyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.AnyValue.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_array_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kvlist_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.AnyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_value = 1;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.AnyValue.string_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_value(), target);
  }

  // bool bool_value = 2;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bool_value(), target);
  }

  // int64 int_value = 3;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_int_value(), target);
  }

  // double double_value = 4;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(), target);
  }

  // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
  if (_internal_has_array_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::array_value(this), target, stream);
  }

  // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
  if (_internal_has_kvlist_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::kvlist_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.AnyValue)
  return target;
}

size_t AnyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.AnyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_value = 1;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 2;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int64 int_value = 3;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int_value());
      break;
    }
    // double double_value = 4;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
    case kArrayValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.array_value_);
      break;
    }
    // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
    case kKvlistValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.kvlist_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.AnyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.AnyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.AnyValue)
    MergeFrom(*source);
  }
}

void AnyValue::MergeFrom(const AnyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.AnyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kArrayValue: {
      _internal_mutable_array_value()->::opentelemetry::proto::common::v1::ArrayValue::MergeFrom(from._internal_array_value());
      break;
    }
    case kKvlistValue: {
      _internal_mutable_kvlist_value()->::opentelemetry::proto::common::v1::KeyValueList::MergeFrom(from._internal_kvlist_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void AnyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.AnyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyValue::CopyFrom(const AnyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.AnyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyValue::IsInitialized() const {
  return true;
}

void AnyValue::InternalSwap(AnyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ArrayValue::_Internal {
 public:
};

ArrayValue::ArrayValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.ArrayValue)
}
ArrayValue::ArrayValue(const ArrayValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.ArrayValue)
}

void ArrayValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
}

ArrayValue::~ArrayValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.ArrayValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ArrayValue::ArenaDtor(void* object) {
  ArrayValue* _this = reinterpret_cast< ArrayValue* >(object);
  (void)_this;
}
void ArrayValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayValue& ArrayValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ArrayValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.ArrayValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.ArrayValue)
  return target;
}

size_t ArrayValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.ArrayValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.ArrayValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.ArrayValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.ArrayValue)
    MergeFrom(*source);
  }
}

void ArrayValue::MergeFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.ArrayValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ArrayValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayValue::CopyFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayValue::IsInitialized() const {
  return true;
}

void ArrayValue::InternalSwap(ArrayValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyValueList::_Internal {
 public:
};

KeyValueList::KeyValueList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.KeyValueList)
}
KeyValueList::KeyValueList(const KeyValueList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.KeyValueList)
}

void KeyValueList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
}

KeyValueList::~KeyValueList() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.KeyValueList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValueList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyValueList::ArenaDtor(void* object) {
  KeyValueList* _this = reinterpret_cast< KeyValueList* >(object);
  (void)_this;
}
void KeyValueList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValueList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValueList& KeyValueList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void KeyValueList::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.KeyValueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValueList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValueList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.KeyValueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.KeyValueList)
  return target;
}

size_t KeyValueList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.KeyValueList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValueList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.KeyValueList)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValueList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValueList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.KeyValueList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.KeyValueList)
    MergeFrom(*source);
  }
}

void KeyValueList::MergeFrom(const KeyValueList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.KeyValueList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void KeyValueList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.KeyValueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueList::CopyFrom(const KeyValueList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.KeyValueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueList::IsInitialized() const {
  return true;
}

void KeyValueList::InternalSwap(KeyValueList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValueList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyValue::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::AnyValue& value(const KeyValue* msg);
};

const ::opentelemetry::proto::common::v1::AnyValue&
KeyValue::_Internal::value(const KeyValue* msg) {
  return *msg->value_;
}
KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::opentelemetry::proto::common::v1::AnyValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.common.v1.AnyValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .opentelemetry.proto.common.v1.AnyValue value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .opentelemetry.proto.common.v1.AnyValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::opentelemetry::proto::common::v1::AnyValue::MergeFrom(from._internal_value());
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringKeyValue::_Internal {
 public:
};

StringKeyValue::StringKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.StringKeyValue)
}
StringKeyValue::StringKeyValue(const StringKeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.StringKeyValue)
}

void StringKeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringKeyValue::~StringKeyValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.StringKeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringKeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringKeyValue::ArenaDtor(void* object) {
  StringKeyValue* _this = reinterpret_cast< StringKeyValue* >(object);
  (void)_this;
}
void StringKeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringKeyValue& StringKeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void StringKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.StringKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringKeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.StringKeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.StringKeyValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringKeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.StringKeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.StringKeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.StringKeyValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.StringKeyValue)
  return target;
}

size_t StringKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.StringKeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringKeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.StringKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StringKeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.StringKeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.StringKeyValue)
    MergeFrom(*source);
  }
}

void StringKeyValue::MergeFrom(const StringKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.StringKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void StringKeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.StringKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringKeyValue::CopyFrom(const StringKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.StringKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringKeyValue::IsInitialized() const {
  return true;
}

void StringKeyValue::InternalSwap(StringKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringKeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentationLibrary::_Internal {
 public:
};

InstrumentationLibrary::InstrumentationLibrary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.InstrumentationLibrary)
}
InstrumentationLibrary::InstrumentationLibrary(const InstrumentationLibrary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.InstrumentationLibrary)
}

void InstrumentationLibrary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InstrumentationLibrary::~InstrumentationLibrary() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.InstrumentationLibrary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentationLibrary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentationLibrary::ArenaDtor(void* object) {
  InstrumentationLibrary* _this = reinterpret_cast< InstrumentationLibrary* >(object);
  (void)_this;
}
void InstrumentationLibrary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentationLibrary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentationLibrary& InstrumentationLibrary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void InstrumentationLibrary::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibrary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.InstrumentationLibrary.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.common.v1.InstrumentationLibrary.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentationLibrary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.InstrumentationLibrary.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.common.v1.InstrumentationLibrary.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.InstrumentationLibrary)
  return target;
}

size_t InstrumentationLibrary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentationLibrary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentationLibrary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentationLibrary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.common.v1.InstrumentationLibrary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.common.v1.InstrumentationLibrary)
    MergeFrom(*source);
  }
}

void InstrumentationLibrary::MergeFrom(const InstrumentationLibrary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void InstrumentationLibrary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentationLibrary::CopyFrom(const InstrumentationLibrary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.InstrumentationLibrary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibrary::IsInitialized() const {
  return true;
}

void InstrumentationLibrary::InternalSwap(InstrumentationLibrary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibrary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::AnyValue* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::AnyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::AnyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::ArrayValue* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::ArrayValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::ArrayValue >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::KeyValueList* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::KeyValueList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::KeyValueList >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::KeyValue* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::StringKeyValue* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::StringKeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::StringKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::common::v1::InstrumentationLibrary* Arena::CreateMaybeMessage< ::opentelemetry::proto::common::v1::InstrumentationLibrary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::common::v1::InstrumentationLibrary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
