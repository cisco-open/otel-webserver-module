// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/logs/v1/logs.proto

#include "opentelemetry/proto/logs/v1/logs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto;
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
class ResourceLogsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceLogs> _instance;
} _ResourceLogs_default_instance_;
class InstrumentationLibraryLogsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentationLibraryLogs> _instance;
} _InstrumentationLibraryLogs_default_instance_;
class LogRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogRecord> _instance;
} _LogRecord_default_instance_;
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::logs::v1::_InstrumentationLibraryLogs_default_instance_;
    new (ptr) ::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto}, {
      &scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,}};

static void InitDefaultsscc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::logs::v1::_LogRecord_default_instance_;
    new (ptr) ::opentelemetry::proto::logs::v1::LogRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::logs::v1::_ResourceLogs_default_instance_;
    new (ptr) ::opentelemetry::proto::logs::v1::ResourceLogs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto}, {
      &scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto.base,
      &scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::ResourceLogs, instrumentation_library_logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs, instrumentation_library_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, severity_number_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, severity_text_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, body_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, dropped_attributes_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, flags_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::logs::v1::LogRecord, span_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::logs::v1::ResourceLogs)},
  { 7, -1, sizeof(::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs)},
  { 14, -1, sizeof(::opentelemetry::proto::logs::v1::LogRecord)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::logs::v1::_ResourceLogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::logs::v1::_InstrumentationLibraryLogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::logs::v1::_LogRecord_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&opentelemetry/proto/logs/v1/logs.proto"
  "\022\033opentelemetry.proto.logs.v1\032*opentelem"
  "etry/proto/common/v1/common.proto\032.opent"
  "elemetry/proto/resource/v1/resource.prot"
  "o\"\252\001\n\014ResourceLogs\022;\n\010resource\030\001 \001(\0132).o"
  "pentelemetry.proto.resource.v1.Resource\022"
  "]\n\034instrumentation_library_logs\030\002 \003(\01327."
  "opentelemetry.proto.logs.v1.Instrumentat"
  "ionLibraryLogs\"\252\001\n\032InstrumentationLibrar"
  "yLogs\022V\n\027instrumentation_library\030\001 \001(\01325"
  ".opentelemetry.proto.common.v1.Instrumen"
  "tationLibrary\0224\n\004logs\030\002 \003(\0132&.openteleme"
  "try.proto.logs.v1.LogRecord\"\326\002\n\tLogRecor"
  "d\022\026\n\016time_unix_nano\030\001 \001(\006\022D\n\017severity_nu"
  "mber\030\002 \001(\0162+.opentelemetry.proto.logs.v1"
  ".SeverityNumber\022\025\n\rseverity_text\030\003 \001(\t\022\014"
  "\n\004name\030\004 \001(\t\0225\n\004body\030\005 \001(\0132\'.opentelemet"
  "ry.proto.common.v1.AnyValue\022;\n\nattribute"
  "s\030\006 \003(\0132\'.opentelemetry.proto.common.v1."
  "KeyValue\022 \n\030dropped_attributes_count\030\007 \001"
  "(\r\022\r\n\005flags\030\010 \001(\007\022\020\n\010trace_id\030\t \001(\014\022\017\n\007s"
  "pan_id\030\n \001(\014*\303\005\n\016SeverityNumber\022\037\n\033SEVER"
  "ITY_NUMBER_UNSPECIFIED\020\000\022\031\n\025SEVERITY_NUM"
  "BER_TRACE\020\001\022\032\n\026SEVERITY_NUMBER_TRACE2\020\002\022"
  "\032\n\026SEVERITY_NUMBER_TRACE3\020\003\022\032\n\026SEVERITY_"
  "NUMBER_TRACE4\020\004\022\031\n\025SEVERITY_NUMBER_DEBUG"
  "\020\005\022\032\n\026SEVERITY_NUMBER_DEBUG2\020\006\022\032\n\026SEVERI"
  "TY_NUMBER_DEBUG3\020\007\022\032\n\026SEVERITY_NUMBER_DE"
  "BUG4\020\010\022\030\n\024SEVERITY_NUMBER_INFO\020\t\022\031\n\025SEVE"
  "RITY_NUMBER_INFO2\020\n\022\031\n\025SEVERITY_NUMBER_I"
  "NFO3\020\013\022\031\n\025SEVERITY_NUMBER_INFO4\020\014\022\030\n\024SEV"
  "ERITY_NUMBER_WARN\020\r\022\031\n\025SEVERITY_NUMBER_W"
  "ARN2\020\016\022\031\n\025SEVERITY_NUMBER_WARN3\020\017\022\031\n\025SEV"
  "ERITY_NUMBER_WARN4\020\020\022\031\n\025SEVERITY_NUMBER_"
  "ERROR\020\021\022\032\n\026SEVERITY_NUMBER_ERROR2\020\022\022\032\n\026S"
  "EVERITY_NUMBER_ERROR3\020\023\022\032\n\026SEVERITY_NUMB"
  "ER_ERROR4\020\024\022\031\n\025SEVERITY_NUMBER_FATAL\020\025\022\032"
  "\n\026SEVERITY_NUMBER_FATAL2\020\026\022\032\n\026SEVERITY_N"
  "UMBER_FATAL3\020\027\022\032\n\026SEVERITY_NUMBER_FATAL4"
  "\020\030*X\n\016LogRecordFlags\022\037\n\033LOG_RECORD_FLAG_"
  "UNSPECIFIED\020\000\022%\n LOG_RECORD_FLAG_TRACE_F"
  "LAGS_MASK\020\377\001Bk\n\036io.opentelemetry.proto.l"
  "ogs.v1B\tLogsProtoP\001Z<github.com/open-tel"
  "emetry/opentelemetry-proto/gen/go/logs/v"
  "1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_sccs[3] = {
  &scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,
  &scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,
  &scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto, "opentelemetry/proto/logs/v1/logs.proto", 1769,
  &descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_once, descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto, 3, file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace logs {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SeverityNumber_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[0];
}
bool SeverityNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogRecordFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto[1];
}
bool LogRecordFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ResourceLogs::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceLogs* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceLogs::_Internal::resource(const ResourceLogs* msg) {
  return *msg->resource_;
}
void ResourceLogs::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
ResourceLogs::ResourceLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumentation_library_logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}
ResourceLogs::ResourceLogs(const ResourceLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentation_library_logs_(from.instrumentation_library_logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource()) {
    resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.ResourceLogs)
}

void ResourceLogs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  resource_ = nullptr;
}

ResourceLogs::~ResourceLogs() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.ResourceLogs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_;
}

void ResourceLogs::ArenaDtor(void* object) {
  ResourceLogs* _this = reinterpret_cast< ResourceLogs* >(object);
  (void)_this;
}
void ResourceLogs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceLogs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLogs& ResourceLogs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  return *internal_default_instance();
}


void ResourceLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.ResourceLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentation_library_logs_.Clear();
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLogs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.logs.v1.InstrumentationLibraryLogs instrumentation_library_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentation_library_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLogs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.ResourceLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource(this), target, stream);
  }

  // repeated .opentelemetry.proto.logs.v1.InstrumentationLibraryLogs instrumentation_library_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentation_library_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instrumentation_library_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.ResourceLogs)
  return target;
}

size_t ResourceLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.ResourceLogs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.InstrumentationLibraryLogs instrumentation_library_logs = 2;
  total_size += 1UL * this->_internal_instrumentation_library_logs_size();
  for (const auto& msg : this->instrumentation_library_logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLogs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLogs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceLogs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.logs.v1.ResourceLogs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.logs.v1.ResourceLogs)
    MergeFrom(*source);
  }
}

void ResourceLogs::MergeFrom(const ResourceLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentation_library_logs_.MergeFrom(from.instrumentation_library_logs_);
  if (from.has_resource()) {
    _internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(from._internal_resource());
  }
}

void ResourceLogs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLogs::CopyFrom(const ResourceLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.ResourceLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLogs::IsInitialized() const {
  return true;
}

void ResourceLogs::InternalSwap(ResourceLogs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentation_library_logs_.InternalSwap(&other->instrumentation_library_logs_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLogs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentationLibraryLogs::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library(const InstrumentationLibraryLogs* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationLibrary&
InstrumentationLibraryLogs::_Internal::instrumentation_library(const InstrumentationLibraryLogs* msg) {
  return *msg->instrumentation_library_;
}
void InstrumentationLibraryLogs::clear_instrumentation_library() {
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
}
InstrumentationLibraryLogs::InstrumentationLibraryLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
}
InstrumentationLibraryLogs::InstrumentationLibraryLogs(const InstrumentationLibraryLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrumentation_library()) {
    instrumentation_library_ = new ::opentelemetry::proto::common::v1::InstrumentationLibrary(*from.instrumentation_library_);
  } else {
    instrumentation_library_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
}

void InstrumentationLibraryLogs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  instrumentation_library_ = nullptr;
}

InstrumentationLibraryLogs::~InstrumentationLibraryLogs() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentationLibraryLogs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instrumentation_library_;
}

void InstrumentationLibraryLogs::ArenaDtor(void* object) {
  InstrumentationLibraryLogs* _this = reinterpret_cast< InstrumentationLibraryLogs* >(object);
  (void)_this;
}
void InstrumentationLibraryLogs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentationLibraryLogs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentationLibraryLogs& InstrumentationLibraryLogs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentationLibraryLogs_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  return *internal_default_instance();
}


void InstrumentationLibraryLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibraryLogs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.logs.v1.LogRecord logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentationLibraryLogs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrumentation_library(this), target, stream);
  }

  // repeated .opentelemetry.proto.logs.v1.LogRecord logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_logs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  return target;
}

size_t InstrumentationLibraryLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.logs.v1.LogRecord logs = 2;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrumentation_library_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentationLibraryLogs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentationLibraryLogs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentationLibraryLogs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
    MergeFrom(*source);
  }
}

void InstrumentationLibraryLogs::MergeFrom(const InstrumentationLibraryLogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.has_instrumentation_library()) {
    _internal_mutable_instrumentation_library()->::opentelemetry::proto::common::v1::InstrumentationLibrary::MergeFrom(from._internal_instrumentation_library());
  }
}

void InstrumentationLibraryLogs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentationLibraryLogs::CopyFrom(const InstrumentationLibraryLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.InstrumentationLibraryLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibraryLogs::IsInitialized() const {
  return true;
}

void InstrumentationLibraryLogs::InternalSwap(InstrumentationLibraryLogs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  swap(instrumentation_library_, other->instrumentation_library_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibraryLogs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LogRecord::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::AnyValue& body(const LogRecord* msg);
};

const ::opentelemetry::proto::common::v1::AnyValue&
LogRecord::_Internal::body(const LogRecord* msg) {
  return *msg->body_;
}
void LogRecord::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
void LogRecord::clear_attributes() {
  attributes_.Clear();
}
LogRecord::LogRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.logs.v1.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  severity_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_severity_text().empty()) {
    severity_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_severity_text(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  if (from._internal_has_body()) {
    body_ = new ::opentelemetry::proto::common::v1::AnyValue(*from.body_);
  } else {
    body_ = nullptr;
  }
  ::memcpy(&time_unix_nano_, &from.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.logs.v1.LogRecord)
}

void LogRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  severity_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&body_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&body_)) + sizeof(flags_));
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.logs.v1.LogRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  severity_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
}

void LogRecord::ArenaDtor(void* object) {
  LogRecord* _this = reinterpret_cast< LogRecord* >(object);
  (void)_this;
}
void LogRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogRecord& LogRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogRecord_opentelemetry_2fproto_2flogs_2fv1_2flogs_2eproto.base);
  return *internal_default_instance();
}


void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.logs.v1.LogRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  severity_text_.ClearToEmpty();
  name_.ClearToEmpty();
  trace_id_.ClearToEmpty();
  span_id_.ClearToEmpty();
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  ::memset(&time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 time_unix_nano = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity_number(static_cast<::opentelemetry::proto::logs::v1::SeverityNumber>(val));
        } else goto handle_unusual;
        continue;
      // string severity_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_severity_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.logs.v1.LogRecord.severity_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.logs.v1.LogRecord.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.common.v1.AnyValue body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // bytes trace_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.logs.v1.LogRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 time_unix_nano = 1;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_time_unix_nano(), target);
  }

  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  if (this->severity_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_severity_number(), target);
  }

  // string severity_text = 3;
  if (this->severity_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_severity_text().data(), static_cast<int>(this->_internal_severity_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.LogRecord.severity_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_severity_text(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.logs.v1.LogRecord.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::body(this), target, stream);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_attributes(i), target, stream);
  }

  // uint32 dropped_attributes_count = 7;
  if (this->dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dropped_attributes_count(), target);
  }

  // fixed32 flags = 8;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_flags(), target);
  }

  // bytes trace_id = 9;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_trace_id(), target);
  }

  // bytes span_id = 10;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_span_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.logs.v1.LogRecord)
  return target;
}

size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.logs.v1.LogRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string severity_text = 3;
  if (this->severity_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_severity_text());
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes trace_id = 9;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 10;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // .opentelemetry.proto.common.v1.AnyValue body = 5;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  // fixed64 time_unix_nano = 1;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 2;
  if (this->severity_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity_number());
  }

  // uint32 dropped_attributes_count = 7;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_attributes_count());
  }

  // fixed32 flags = 8;
  if (this->flags() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.logs.v1.LogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.logs.v1.LogRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.logs.v1.LogRecord)
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.logs.v1.LogRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.severity_text().size() > 0) {
    _internal_set_severity_text(from._internal_severity_text());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::opentelemetry::proto::common::v1::AnyValue::MergeFrom(from._internal_body());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.severity_number() != 0) {
    _internal_set_severity_number(from._internal_severity_number());
  }
  if (from.dropped_attributes_count() != 0) {
    _internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void LogRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.logs.v1.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.logs.v1.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  return true;
}

void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  severity_text_.Swap(&other->severity_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord, flags_)
      + sizeof(LogRecord::flags_)
      - PROTOBUF_FIELD_OFFSET(LogRecord, body_)>(
          reinterpret_cast<char*>(&body_),
          reinterpret_cast<char*>(&other->body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace logs
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::ResourceLogs* Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::ResourceLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::ResourceLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs* Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::InstrumentationLibraryLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::logs::v1::LogRecord* Arena::CreateMaybeMessage< ::opentelemetry::proto::logs::v1::LogRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::logs::v1::LogRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
