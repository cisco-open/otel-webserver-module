// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

#include "opentelemetry/proto/metrics/v1/metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
class ResourceMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMetrics> _instance;
} _ResourceMetrics_default_instance_;
class InstrumentationLibraryMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentationLibraryMetrics> _instance;
} _InstrumentationLibraryMetrics_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
class IntGaugeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntGauge> _instance;
} _IntGauge_default_instance_;
class DoubleGaugeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleGauge> _instance;
} _DoubleGauge_default_instance_;
class IntSumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntSum> _instance;
} _IntSum_default_instance_;
class DoubleSumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleSum> _instance;
} _DoubleSum_default_instance_;
class IntHistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntHistogram> _instance;
} _IntHistogram_default_instance_;
class DoubleHistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleHistogram> _instance;
} _DoubleHistogram_default_instance_;
class DoubleSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleSummary> _instance;
} _DoubleSummary_default_instance_;
class IntDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntDataPoint> _instance;
} _IntDataPoint_default_instance_;
class DoubleDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleDataPoint> _instance;
} _DoubleDataPoint_default_instance_;
class IntHistogramDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntHistogramDataPoint> _instance;
} _IntHistogramDataPoint_default_instance_;
class DoubleHistogramDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleHistogramDataPoint> _instance;
} _DoubleHistogramDataPoint_default_instance_;
class DoubleSummaryDataPoint_ValueAtQuantileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleSummaryDataPoint_ValueAtQuantile> _instance;
} _DoubleSummaryDataPoint_ValueAtQuantile_default_instance_;
class DoubleSummaryDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleSummaryDataPoint> _instance;
} _DoubleSummaryDataPoint_default_instance_;
class IntExemplarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntExemplar> _instance;
} _IntExemplar_default_instance_;
class DoubleExemplarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleExemplar> _instance;
} _DoubleExemplar_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleExemplar_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleExemplar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleGauge_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleGauge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleHistogram_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleHistogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleHistogramDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleSum_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleSum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleSummary_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleSummaryDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_DoubleSummaryDataPoint_ValueAtQuantile_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_InstrumentationLibraryMetrics_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntExemplar_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntExemplar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntGauge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntHistogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntHistogramDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntSum_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntSum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Metric_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Metric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_ResourceMetrics_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::ResourceMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto.base,
      &scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, instrumentation_library_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, instrumentation_library_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, description_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, unit_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntGauge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntGauge, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleGauge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleGauge, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, aggregation_temporality_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, is_monotonic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSum, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSum, aggregation_temporality_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSum, is_monotonic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogram, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogram, aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummary, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, explicit_bounds_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, explicit_bounds_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile, quantile_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint, quantile_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, filtered_labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, trace_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, filtered_labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::DoubleExemplar, trace_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::metrics::v1::ResourceMetrics)},
  { 7, -1, sizeof(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics)},
  { 14, -1, sizeof(::opentelemetry::proto::metrics::v1::Metric)},
  { 30, -1, sizeof(::opentelemetry::proto::metrics::v1::IntGauge)},
  { 36, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleGauge)},
  { 42, -1, sizeof(::opentelemetry::proto::metrics::v1::IntSum)},
  { 50, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleSum)},
  { 58, -1, sizeof(::opentelemetry::proto::metrics::v1::IntHistogram)},
  { 65, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleHistogram)},
  { 72, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleSummary)},
  { 78, -1, sizeof(::opentelemetry::proto::metrics::v1::IntDataPoint)},
  { 88, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleDataPoint)},
  { 98, -1, sizeof(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint)},
  { 111, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint)},
  { 124, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile)},
  { 131, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint)},
  { 142, -1, sizeof(::opentelemetry::proto::metrics::v1::IntExemplar)},
  { 152, -1, sizeof(::opentelemetry::proto::metrics::v1::DoubleExemplar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_ResourceMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_InstrumentationLibraryMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleGauge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntSum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleSum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleHistogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntHistogramDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleHistogramDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleSummaryDataPoint_ValueAtQuantile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleSummaryDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntExemplar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_DoubleExemplar_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,opentelemetry/proto/metrics/v1/metrics"
  ".proto\022\036opentelemetry.proto.metrics.v1\032*"
  "opentelemetry/proto/common/v1/common.pro"
  "to\032.opentelemetry/proto/resource/v1/reso"
  "urce.proto\"\266\001\n\017ResourceMetrics\022;\n\010resour"
  "ce\030\001 \001(\0132).opentelemetry.proto.resource."
  "v1.Resource\022f\n\037instrumentation_library_m"
  "etrics\030\002 \003(\0132=.opentelemetry.proto.metri"
  "cs.v1.InstrumentationLibraryMetrics\"\260\001\n\035"
  "InstrumentationLibraryMetrics\022V\n\027instrum"
  "entation_library\030\001 \001(\01325.opentelemetry.p"
  "roto.common.v1.InstrumentationLibrary\0227\n"
  "\007metrics\030\002 \003(\0132&.opentelemetry.proto.met"
  "rics.v1.Metric\"\236\004\n\006Metric\022\014\n\004name\030\001 \001(\t\022"
  "\023\n\013description\030\002 \001(\t\022\014\n\004unit\030\003 \001(\t\022=\n\tin"
  "t_gauge\030\004 \001(\0132(.opentelemetry.proto.metr"
  "ics.v1.IntGaugeH\000\022C\n\014double_gauge\030\005 \001(\0132"
  "+.opentelemetry.proto.metrics.v1.DoubleG"
  "augeH\000\0229\n\007int_sum\030\006 \001(\0132&.opentelemetry."
  "proto.metrics.v1.IntSumH\000\022\?\n\ndouble_sum\030"
  "\007 \001(\0132).opentelemetry.proto.metrics.v1.D"
  "oubleSumH\000\022E\n\rint_histogram\030\010 \001(\0132,.open"
  "telemetry.proto.metrics.v1.IntHistogramH"
  "\000\022K\n\020double_histogram\030\t \001(\0132/.openteleme"
  "try.proto.metrics.v1.DoubleHistogramH\000\022G"
  "\n\016double_summary\030\013 \001(\0132-.opentelemetry.p"
  "roto.metrics.v1.DoubleSummaryH\000B\006\n\004data\""
  "M\n\010IntGauge\022A\n\013data_points\030\001 \003(\0132,.opent"
  "elemetry.proto.metrics.v1.IntDataPoint\"S"
  "\n\013DoubleGauge\022D\n\013data_points\030\001 \003(\0132/.ope"
  "ntelemetry.proto.metrics.v1.DoubleDataPo"
  "int\"\272\001\n\006IntSum\022A\n\013data_points\030\001 \003(\0132,.op"
  "entelemetry.proto.metrics.v1.IntDataPoin"
  "t\022W\n\027aggregation_temporality\030\002 \001(\01626.ope"
  "ntelemetry.proto.metrics.v1.AggregationT"
  "emporality\022\024\n\014is_monotonic\030\003 \001(\010\"\300\001\n\tDou"
  "bleSum\022D\n\013data_points\030\001 \003(\0132/.openteleme"
  "try.proto.metrics.v1.DoubleDataPoint\022W\n\027"
  "aggregation_temporality\030\002 \001(\01626.opentele"
  "metry.proto.metrics.v1.AggregationTempor"
  "ality\022\024\n\014is_monotonic\030\003 \001(\010\"\263\001\n\014IntHisto"
  "gram\022J\n\013data_points\030\001 \003(\01325.opentelemetr"
  "y.proto.metrics.v1.IntHistogramDataPoint"
  "\022W\n\027aggregation_temporality\030\002 \001(\01626.open"
  "telemetry.proto.metrics.v1.AggregationTe"
  "mporality\"\271\001\n\017DoubleHistogram\022M\n\013data_po"
  "ints\030\001 \003(\01328.opentelemetry.proto.metrics"
  ".v1.DoubleHistogramDataPoint\022W\n\027aggregat"
  "ion_temporality\030\002 \001(\01626.opentelemetry.pr"
  "oto.metrics.v1.AggregationTemporality\"\\\n"
  "\rDoubleSummary\022K\n\013data_points\030\001 \003(\01326.op"
  "entelemetry.proto.metrics.v1.DoubleSumma"
  "ryDataPoint\"\322\001\n\014IntDataPoint\022=\n\006labels\030\001"
  " \003(\0132-.opentelemetry.proto.common.v1.Str"
  "ingKeyValue\022\034\n\024start_time_unix_nano\030\002 \001("
  "\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005value\030\004 \001(\020"
  "\022>\n\texemplars\030\005 \003(\0132+.opentelemetry.prot"
  "o.metrics.v1.IntExemplar\"\330\001\n\017DoubleDataP"
  "oint\022=\n\006labels\030\001 \003(\0132-.opentelemetry.pro"
  "to.common.v1.StringKeyValue\022\034\n\024start_tim"
  "e_unix_nano\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001("
  "\006\022\r\n\005value\030\004 \001(\001\022A\n\texemplars\030\005 \003(\0132..op"
  "entelemetry.proto.metrics.v1.DoubleExemp"
  "lar\"\230\002\n\025IntHistogramDataPoint\022=\n\006labels\030"
  "\001 \003(\0132-.opentelemetry.proto.common.v1.St"
  "ringKeyValue\022\034\n\024start_time_unix_nano\030\002 \001"
  "(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count\030\004 \001("
  "\006\022\013\n\003sum\030\005 \001(\020\022\025\n\rbucket_counts\030\006 \003(\006\022\027\n"
  "\017explicit_bounds\030\007 \003(\001\022>\n\texemplars\030\010 \003("
  "\0132+.opentelemetry.proto.metrics.v1.IntEx"
  "emplar\"\236\002\n\030DoubleHistogramDataPoint\022=\n\006l"
  "abels\030\001 \003(\0132-.opentelemetry.proto.common"
  ".v1.StringKeyValue\022\034\n\024start_time_unix_na"
  "no\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005coun"
  "t\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001\022\025\n\rbucket_counts\030\006 "
  "\003(\006\022\027\n\017explicit_bounds\030\007 \003(\001\022A\n\texemplar"
  "s\030\010 \003(\0132..opentelemetry.proto.metrics.v1"
  ".DoubleExemplar\"\276\002\n\026DoubleSummaryDataPoi"
  "nt\022=\n\006labels\030\001 \003(\0132-.opentelemetry.proto"
  ".common.v1.StringKeyValue\022\034\n\024start_time_"
  "unix_nano\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022"
  "\r\n\005count\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001\022_\n\017quantile_"
  "values\030\006 \003(\0132F.opentelemetry.proto.metri"
  "cs.v1.DoubleSummaryDataPoint.ValueAtQuan"
  "tile\0322\n\017ValueAtQuantile\022\020\n\010quantile\030\001 \001("
  "\001\022\r\n\005value\030\002 \001(\001\"\237\001\n\013IntExemplar\022F\n\017filt"
  "ered_labels\030\001 \003(\0132-.opentelemetry.proto."
  "common.v1.StringKeyValue\022\026\n\016time_unix_na"
  "no\030\002 \001(\006\022\r\n\005value\030\003 \001(\020\022\017\n\007span_id\030\004 \001(\014"
  "\022\020\n\010trace_id\030\005 \001(\014\"\242\001\n\016DoubleExemplar\022F\n"
  "\017filtered_labels\030\001 \003(\0132-.opentelemetry.p"
  "roto.common.v1.StringKeyValue\022\026\n\016time_un"
  "ix_nano\030\002 \001(\006\022\r\n\005value\030\003 \001(\001\022\017\n\007span_id\030"
  "\004 \001(\014\022\020\n\010trace_id\030\005 \001(\014*\214\001\n\026AggregationT"
  "emporality\022\'\n#AGGREGATION_TEMPORALITY_UN"
  "SPECIFIED\020\000\022!\n\035AGGREGATION_TEMPORALITY_D"
  "ELTA\020\001\022&\n\"AGGREGATION_TEMPORALITY_CUMULA"
  "TIVE\020\002Bt\n!io.opentelemetry.proto.metrics"
  ".v1B\014MetricsProtoP\001Z\?github.com/open-tel"
  "emetry/opentelemetry-proto/gen/go/metric"
  "s/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_sccs[18] = {
  &scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, "opentelemetry/proto/metrics/v1/metrics.proto", 4012,
  &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once, descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps, 18, 2,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, 18, file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[0];
}
bool AggregationTemporality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ResourceMetrics::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceMetrics* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceMetrics::_Internal::resource(const ResourceMetrics* msg) {
  return *msg->resource_;
}
void ResourceMetrics::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
ResourceMetrics::ResourceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumentation_library_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}
ResourceMetrics::ResourceMetrics(const ResourceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentation_library_metrics_(from.instrumentation_library_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource()) {
    resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}

void ResourceMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  resource_ = nullptr;
}

ResourceMetrics::~ResourceMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_;
}

void ResourceMetrics::ArenaDtor(void* object) {
  ResourceMetrics* _this = reinterpret_cast< ResourceMetrics* >(object);
  (void)_this;
}
void ResourceMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMetrics& ResourceMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ResourceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentation_library_metrics_.Clear();
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentation_library_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource(this), target, stream);
  }

  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentation_library_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instrumentation_library_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ResourceMetrics)
  return target;
}

size_t ResourceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  total_size += 1UL * this->_internal_instrumentation_library_metrics_size();
  for (const auto& msg : this->instrumentation_library_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.ResourceMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.ResourceMetrics)
    MergeFrom(*source);
  }
}

void ResourceMetrics::MergeFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentation_library_metrics_.MergeFrom(from.instrumentation_library_metrics_);
  if (from.has_resource()) {
    _internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(from._internal_resource());
  }
}

void ResourceMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMetrics::CopyFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMetrics::IsInitialized() const {
  return true;
}

void ResourceMetrics::InternalSwap(ResourceMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentation_library_metrics_.InternalSwap(&other->instrumentation_library_metrics_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentationLibraryMetrics::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library(const InstrumentationLibraryMetrics* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationLibrary&
InstrumentationLibraryMetrics::_Internal::instrumentation_library(const InstrumentationLibraryMetrics* msg) {
  return *msg->instrumentation_library_;
}
void InstrumentationLibraryMetrics::clear_instrumentation_library() {
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
}
InstrumentationLibraryMetrics::InstrumentationLibraryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
}
InstrumentationLibraryMetrics::InstrumentationLibraryMetrics(const InstrumentationLibraryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrumentation_library()) {
    instrumentation_library_ = new ::opentelemetry::proto::common::v1::InstrumentationLibrary(*from.instrumentation_library_);
  } else {
    instrumentation_library_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
}

void InstrumentationLibraryMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  instrumentation_library_ = nullptr;
}

InstrumentationLibraryMetrics::~InstrumentationLibraryMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentationLibraryMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instrumentation_library_;
}

void InstrumentationLibraryMetrics::ArenaDtor(void* object) {
  InstrumentationLibraryMetrics* _this = reinterpret_cast< InstrumentationLibraryMetrics* >(object);
  (void)_this;
}
void InstrumentationLibraryMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentationLibraryMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentationLibraryMetrics& InstrumentationLibraryMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void InstrumentationLibraryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibraryMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentationLibraryMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrumentation_library(this), target, stream);
  }

  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  return target;
}

size_t InstrumentationLibraryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrumentation_library_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentationLibraryMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentationLibraryMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentationLibraryMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
    MergeFrom(*source);
  }
}

void InstrumentationLibraryMetrics::MergeFrom(const InstrumentationLibraryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from.has_instrumentation_library()) {
    _internal_mutable_instrumentation_library()->::opentelemetry::proto::common::v1::InstrumentationLibrary::MergeFrom(from._internal_instrumentation_library());
  }
}

void InstrumentationLibraryMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentationLibraryMetrics::CopyFrom(const InstrumentationLibraryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibraryMetrics::IsInitialized() const {
  return true;
}

void InstrumentationLibraryMetrics::InternalSwap(InstrumentationLibraryMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  swap(instrumentation_library_, other->instrumentation_library_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibraryMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metric::_Internal {
 public:
  static const ::opentelemetry::proto::metrics::v1::IntGauge& int_gauge(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::DoubleGauge& double_gauge(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::IntSum& int_sum(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::DoubleSum& double_sum(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::IntHistogram& int_histogram(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::DoubleHistogram& double_histogram(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::DoubleSummary& double_summary(const Metric* msg);
};

const ::opentelemetry::proto::metrics::v1::IntGauge&
Metric::_Internal::int_gauge(const Metric* msg) {
  return *msg->data_.int_gauge_;
}
const ::opentelemetry::proto::metrics::v1::DoubleGauge&
Metric::_Internal::double_gauge(const Metric* msg) {
  return *msg->data_.double_gauge_;
}
const ::opentelemetry::proto::metrics::v1::IntSum&
Metric::_Internal::int_sum(const Metric* msg) {
  return *msg->data_.int_sum_;
}
const ::opentelemetry::proto::metrics::v1::DoubleSum&
Metric::_Internal::double_sum(const Metric* msg) {
  return *msg->data_.double_sum_;
}
const ::opentelemetry::proto::metrics::v1::IntHistogram&
Metric::_Internal::int_histogram(const Metric* msg) {
  return *msg->data_.int_histogram_;
}
const ::opentelemetry::proto::metrics::v1::DoubleHistogram&
Metric::_Internal::double_histogram(const Metric* msg) {
  return *msg->data_.double_histogram_;
}
const ::opentelemetry::proto::metrics::v1::DoubleSummary&
Metric::_Internal::double_summary(const Metric* msg) {
  return *msg->data_.double_summary_;
}
void Metric::set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_gauge);
    if (message_arena != submessage_arena) {
      int_gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_gauge, submessage_arena);
    }
    set_has_int_gauge();
    data_.int_gauge_ = int_gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_gauge)
}
void Metric::set_allocated_double_gauge(::opentelemetry::proto::metrics::v1::DoubleGauge* double_gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (double_gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_gauge);
    if (message_arena != submessage_arena) {
      double_gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_gauge, submessage_arena);
    }
    set_has_double_gauge();
    data_.double_gauge_ = double_gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_gauge)
}
void Metric::set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_sum);
    if (message_arena != submessage_arena) {
      int_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_sum, submessage_arena);
    }
    set_has_int_sum();
    data_.int_sum_ = int_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_sum)
}
void Metric::set_allocated_double_sum(::opentelemetry::proto::metrics::v1::DoubleSum* double_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (double_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_sum);
    if (message_arena != submessage_arena) {
      double_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_sum, submessage_arena);
    }
    set_has_double_sum();
    data_.double_sum_ = double_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_sum)
}
void Metric::set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_histogram);
    if (message_arena != submessage_arena) {
      int_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_histogram, submessage_arena);
    }
    set_has_int_histogram();
    data_.int_histogram_ = int_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_histogram)
}
void Metric::set_allocated_double_histogram(::opentelemetry::proto::metrics::v1::DoubleHistogram* double_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (double_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_histogram);
    if (message_arena != submessage_arena) {
      double_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_histogram, submessage_arena);
    }
    set_has_double_histogram();
    data_.double_histogram_ = double_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_histogram)
}
void Metric::set_allocated_double_summary(::opentelemetry::proto::metrics::v1::DoubleSummary* double_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (double_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_summary);
    if (message_arena != submessage_arena) {
      double_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_summary, submessage_arena);
    }
    set_has_double_summary();
    data_.double_summary_ = double_summary;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_summary)
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kIntGauge: {
      _internal_mutable_int_gauge()->::opentelemetry::proto::metrics::v1::IntGauge::MergeFrom(from._internal_int_gauge());
      break;
    }
    case kDoubleGauge: {
      _internal_mutable_double_gauge()->::opentelemetry::proto::metrics::v1::DoubleGauge::MergeFrom(from._internal_double_gauge());
      break;
    }
    case kIntSum: {
      _internal_mutable_int_sum()->::opentelemetry::proto::metrics::v1::IntSum::MergeFrom(from._internal_int_sum());
      break;
    }
    case kDoubleSum: {
      _internal_mutable_double_sum()->::opentelemetry::proto::metrics::v1::DoubleSum::MergeFrom(from._internal_double_sum());
      break;
    }
    case kIntHistogram: {
      _internal_mutable_int_histogram()->::opentelemetry::proto::metrics::v1::IntHistogram::MergeFrom(from._internal_int_histogram());
      break;
    }
    case kDoubleHistogram: {
      _internal_mutable_double_histogram()->::opentelemetry::proto::metrics::v1::DoubleHistogram::MergeFrom(from._internal_double_histogram());
      break;
    }
    case kDoubleSummary: {
      _internal_mutable_double_summary()->::opentelemetry::proto::metrics::v1::DoubleSummary::MergeFrom(from._internal_double_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Metric)
}

void Metric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Metric::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.Metric)
  switch (data_case()) {
    case kIntGauge: {
      if (GetArena() == nullptr) {
        delete data_.int_gauge_;
      }
      break;
    }
    case kDoubleGauge: {
      if (GetArena() == nullptr) {
        delete data_.double_gauge_;
      }
      break;
    }
    case kIntSum: {
      if (GetArena() == nullptr) {
        delete data_.int_sum_;
      }
      break;
    }
    case kDoubleSum: {
      if (GetArena() == nullptr) {
        delete data_.double_sum_;
      }
      break;
    }
    case kIntHistogram: {
      if (GetArena() == nullptr) {
        delete data_.int_histogram_;
      }
      break;
    }
    case kDoubleHistogram: {
      if (GetArena() == nullptr) {
        delete data_.double_histogram_;
      }
      break;
    }
    case kDoubleSummary: {
      if (GetArena() == nullptr) {
        delete data_.double_summary_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  unit_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_gauge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_gauge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;
  if (_internal_has_int_gauge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::int_gauge(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;
  if (_internal_has_double_gauge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::double_gauge(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6;
  if (_internal_has_int_sum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::int_sum(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;
  if (_internal_has_double_sum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::double_sum(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;
  if (_internal_has_int_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::int_histogram(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;
  if (_internal_has_double_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::double_histogram(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;
  if (_internal_has_double_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::double_summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  switch (data_case()) {
    // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;
    case kIntGauge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_gauge_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;
    case kDoubleGauge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.double_gauge_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6;
    case kIntSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_sum_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;
    case kDoubleSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.double_sum_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;
    case kIntHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_histogram_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;
    case kDoubleHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.double_histogram_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;
    case kDoubleSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.double_summary_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Metric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  switch (from.data_case()) {
    case kIntGauge: {
      _internal_mutable_int_gauge()->::opentelemetry::proto::metrics::v1::IntGauge::MergeFrom(from._internal_int_gauge());
      break;
    }
    case kDoubleGauge: {
      _internal_mutable_double_gauge()->::opentelemetry::proto::metrics::v1::DoubleGauge::MergeFrom(from._internal_double_gauge());
      break;
    }
    case kIntSum: {
      _internal_mutable_int_sum()->::opentelemetry::proto::metrics::v1::IntSum::MergeFrom(from._internal_int_sum());
      break;
    }
    case kDoubleSum: {
      _internal_mutable_double_sum()->::opentelemetry::proto::metrics::v1::DoubleSum::MergeFrom(from._internal_double_sum());
      break;
    }
    case kIntHistogram: {
      _internal_mutable_int_histogram()->::opentelemetry::proto::metrics::v1::IntHistogram::MergeFrom(from._internal_int_histogram());
      break;
    }
    case kDoubleHistogram: {
      _internal_mutable_double_histogram()->::opentelemetry::proto::metrics::v1::DoubleHistogram::MergeFrom(from._internal_double_histogram());
      break;
    }
    case kDoubleSummary: {
      _internal_mutable_double_summary()->::opentelemetry::proto::metrics::v1::DoubleSummary::MergeFrom(from._internal_double_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntGauge::_Internal {
 public:
};

IntGauge::IntGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntGauge)
}
IntGauge::IntGauge(const IntGauge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntGauge)
}

void IntGauge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

IntGauge::~IntGauge() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntGauge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntGauge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntGauge::ArenaDtor(void* object) {
  IntGauge* _this = reinterpret_cast< IntGauge* >(object);
  (void)_this;
}
void IntGauge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntGauge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntGauge& IntGauge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntGauge::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntGauge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntGauge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntGauge)
  return target;
}

size_t IntGauge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntGauge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntGauge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  GOOGLE_DCHECK_NE(&from, this);
  const IntGauge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntGauge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntGauge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntGauge)
    MergeFrom(*source);
  }
}

void IntGauge::MergeFrom(const IntGauge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void IntGauge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntGauge::CopyFrom(const IntGauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntGauge::IsInitialized() const {
  return true;
}

void IntGauge::InternalSwap(IntGauge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntGauge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleGauge::_Internal {
 public:
};

DoubleGauge::DoubleGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleGauge)
}
DoubleGauge::DoubleGauge(const DoubleGauge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleGauge)
}

void DoubleGauge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

DoubleGauge::~DoubleGauge() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleGauge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleGauge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleGauge::ArenaDtor(void* object) {
  DoubleGauge* _this = reinterpret_cast< DoubleGauge* >(object);
  (void)_this;
}
void DoubleGauge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleGauge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleGauge& DoubleGauge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleGauge::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleGauge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleGauge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleGauge)
  return target;
}

size_t DoubleGauge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleGauge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleGauge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleGauge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleGauge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleGauge)
    MergeFrom(*source);
  }
}

void DoubleGauge::MergeFrom(const DoubleGauge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void DoubleGauge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleGauge::CopyFrom(const DoubleGauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleGauge::IsInitialized() const {
  return true;
}

void DoubleGauge::InternalSwap(DoubleGauge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleGauge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntSum::_Internal {
 public:
};

IntSum::IntSum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntSum)
}
IntSum::IntSum(const IntSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aggregation_temporality_, &from.aggregation_temporality_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
    reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntSum)
}

void IntSum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_temporality_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
}

IntSum::~IntSum() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntSum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntSum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntSum::ArenaDtor(void* object) {
  IntSum* _this = reinterpret_cast< IntSum* >(object);
  (void)_this;
}
void IntSum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntSum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntSum& IntSum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntSum::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  ::memset(&aggregation_temporality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntSum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      // bool is_monotonic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_monotonic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntSum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_monotonic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntSum)
  return target;
}

size_t IntSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntSum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntSum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntSum)
  GOOGLE_DCHECK_NE(&from, this);
  const IntSum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntSum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntSum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntSum)
    MergeFrom(*source);
  }
}

void IntSum::MergeFrom(const IntSum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntSum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  if (from.is_monotonic() != 0) {
    _internal_set_is_monotonic(from._internal_is_monotonic());
  }
}

void IntSum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntSum::CopyFrom(const IntSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntSum::IsInitialized() const {
  return true;
}

void IntSum::InternalSwap(IntSum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntSum, is_monotonic_)
      + sizeof(IntSum::is_monotonic_)
      - PROTOBUF_FIELD_OFFSET(IntSum, aggregation_temporality_)>(
          reinterpret_cast<char*>(&aggregation_temporality_),
          reinterpret_cast<char*>(&other->aggregation_temporality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntSum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleSum::_Internal {
 public:
};

DoubleSum::DoubleSum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleSum)
}
DoubleSum::DoubleSum(const DoubleSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aggregation_temporality_, &from.aggregation_temporality_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
    reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleSum)
}

void DoubleSum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_temporality_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
}

DoubleSum::~DoubleSum() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleSum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleSum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleSum::ArenaDtor(void* object) {
  DoubleSum* _this = reinterpret_cast< DoubleSum* >(object);
  (void)_this;
}
void DoubleSum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleSum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleSum& DoubleSum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleSum::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  ::memset(&aggregation_temporality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleSum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      // bool is_monotonic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_monotonic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_monotonic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleSum)
  return target;
}

size_t DoubleSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleSum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSum)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleSum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleSum)
    MergeFrom(*source);
  }
}

void DoubleSum::MergeFrom(const DoubleSum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  if (from.is_monotonic() != 0) {
    _internal_set_is_monotonic(from._internal_is_monotonic());
  }
}

void DoubleSum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSum::CopyFrom(const DoubleSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSum::IsInitialized() const {
  return true;
}

void DoubleSum::InternalSwap(DoubleSum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleSum, is_monotonic_)
      + sizeof(DoubleSum::is_monotonic_)
      - PROTOBUF_FIELD_OFFSET(DoubleSum, aggregation_temporality_)>(
          reinterpret_cast<char*>(&aggregation_temporality_),
          reinterpret_cast<char*>(&other->aggregation_temporality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntHistogram::_Internal {
 public:
};

IntHistogram::IntHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntHistogram)
}
IntHistogram::IntHistogram(const IntHistogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_temporality_ = from.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntHistogram)
}

void IntHistogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  aggregation_temporality_ = 0;
}

IntHistogram::~IntHistogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntHistogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntHistogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntHistogram::ArenaDtor(void* object) {
  IntHistogram* _this = reinterpret_cast< IntHistogram* >(object);
  (void)_this;
}
void IntHistogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntHistogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntHistogram& IntHistogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntHistogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntHistogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntHistogram)
  return target;
}

size_t IntHistogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntHistogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntHistogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  const IntHistogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntHistogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntHistogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntHistogram)
    MergeFrom(*source);
  }
}

void IntHistogram::MergeFrom(const IntHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
}

void IntHistogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntHistogram::CopyFrom(const IntHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntHistogram::IsInitialized() const {
  return true;
}

void IntHistogram::InternalSwap(IntHistogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(aggregation_temporality_, other->aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntHistogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleHistogram::_Internal {
 public:
};

DoubleHistogram::DoubleHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleHistogram)
}
DoubleHistogram::DoubleHistogram(const DoubleHistogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_temporality_ = from.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleHistogram)
}

void DoubleHistogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  aggregation_temporality_ = 0;
}

DoubleHistogram::~DoubleHistogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleHistogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleHistogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleHistogram::ArenaDtor(void* object) {
  DoubleHistogram* _this = reinterpret_cast< DoubleHistogram* >(object);
  (void)_this;
}
void DoubleHistogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleHistogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleHistogram& DoubleHistogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleHistogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleHistogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleHistogram)
  return target;
}

size_t DoubleHistogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleHistogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleHistogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleHistogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleHistogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleHistogram)
    MergeFrom(*source);
  }
}

void DoubleHistogram::MergeFrom(const DoubleHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
}

void DoubleHistogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleHistogram::CopyFrom(const DoubleHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleHistogram::IsInitialized() const {
  return true;
}

void DoubleHistogram::InternalSwap(DoubleHistogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(aggregation_temporality_, other->aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleHistogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleSummary::_Internal {
 public:
};

DoubleSummary::DoubleSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleSummary)
}
DoubleSummary::DoubleSummary(const DoubleSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleSummary)
}

void DoubleSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

DoubleSummary::~DoubleSummary() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleSummary::ArenaDtor(void* object) {
  DoubleSummary* _this = reinterpret_cast< DoubleSummary* >(object);
  (void)_this;
}
void DoubleSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleSummary& DoubleSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleSummary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleSummary)
  return target;
}

size_t DoubleSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleSummary)
    MergeFrom(*source);
  }
}

void DoubleSummary::MergeFrom(const DoubleSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void DoubleSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSummary::CopyFrom(const DoubleSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSummary::IsInitialized() const {
  return true;
}

void DoubleSummary::InternalSwap(DoubleSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntDataPoint::_Internal {
 public:
};

void IntDataPoint::clear_labels() {
  labels_.Clear();
}
IntDataPoint::IntDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntDataPoint)
}
IntDataPoint::IntDataPoint(const IntDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntDataPoint)
}

void IntDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
}

IntDataPoint::~IntDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntDataPoint::ArenaDtor(void* object) {
  IntDataPoint* _this = reinterpret_cast< IntDataPoint* >(object);
  (void)_this;
}
void IntDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntDataPoint& IntDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // sfixed64 value = 4;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(4, this->_internal_value(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntDataPoint)
  return target;
}

size_t IntDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 value = 4;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IntDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntDataPoint)
    MergeFrom(*source);
  }
}

void IntDataPoint::MergeFrom(const IntDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntDataPoint::CopyFrom(const IntDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntDataPoint::IsInitialized() const {
  return true;
}

void IntDataPoint::InternalSwap(IntDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntDataPoint, value_)
      + sizeof(IntDataPoint::value_)
      - PROTOBUF_FIELD_OFFSET(IntDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleDataPoint::_Internal {
 public:
};

void DoubleDataPoint::clear_labels() {
  labels_.Clear();
}
DoubleDataPoint::DoubleDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleDataPoint)
}
DoubleDataPoint::DoubleDataPoint(const DoubleDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleDataPoint)
}

void DoubleDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
}

DoubleDataPoint::~DoubleDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleDataPoint::ArenaDtor(void* object) {
  DoubleDataPoint* _this = reinterpret_cast< DoubleDataPoint* >(object);
  (void)_this;
}
void DoubleDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleDataPoint& DoubleDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_value(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  return target;
}

size_t DoubleDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleDataPoint)
    MergeFrom(*source);
  }
}

void DoubleDataPoint::MergeFrom(const DoubleDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void DoubleDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleDataPoint::CopyFrom(const DoubleDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleDataPoint::IsInitialized() const {
  return true;
}

void DoubleDataPoint::InternalSwap(DoubleDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleDataPoint, value_)
      + sizeof(DoubleDataPoint::value_)
      - PROTOBUF_FIELD_OFFSET(DoubleDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntHistogramDataPoint::_Internal {
 public:
};

void IntHistogramDataPoint::clear_labels() {
  labels_.Clear();
}
IntHistogramDataPoint::IntHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  bucket_counts_(arena),
  explicit_bounds_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
}
IntHistogramDataPoint::IntHistogramDataPoint(const IntHistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      bucket_counts_(from.bucket_counts_),
      explicit_bounds_(from.explicit_bounds_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
}

void IntHistogramDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
}

IntHistogramDataPoint::~IntHistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntHistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntHistogramDataPoint::ArenaDtor(void* object) {
  IntHistogramDataPoint* _this = reinterpret_cast< IntHistogramDataPoint* >(object);
  (void)_this;
}
void IntHistogramDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntHistogramDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntHistogramDataPoint& IntHistogramDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntHistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  bucket_counts_.Clear();
  explicit_bounds_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntHistogramDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 bucket_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated double explicit_bounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_explicit_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_explicit_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntHistogramDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // sfixed64 sum = 5;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(5, this->_internal_sum(), target);
  }

  // repeated fixed64 bucket_counts = 6;
  if (this->_internal_bucket_counts_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_counts(), target);
  }

  // repeated double explicit_bounds = 7;
  if (this->_internal_explicit_bounds_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_explicit_bounds(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  return target;
}

size_t IntHistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 bucket_counts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double explicit_bounds = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_explicit_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _explicit_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 sum = 5;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntHistogramDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IntHistogramDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntHistogramDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
    MergeFrom(*source);
  }
}

void IntHistogramDataPoint::MergeFrom(const IntHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  bucket_counts_.MergeFrom(from.bucket_counts_);
  explicit_bounds_.MergeFrom(from.explicit_bounds_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
}

void IntHistogramDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntHistogramDataPoint::CopyFrom(const IntHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntHistogramDataPoint::IsInitialized() const {
  return true;
}

void IntHistogramDataPoint::InternalSwap(IntHistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  explicit_bounds_.InternalSwap(&other->explicit_bounds_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntHistogramDataPoint, sum_)
      + sizeof(IntHistogramDataPoint::sum_)
      - PROTOBUF_FIELD_OFFSET(IntHistogramDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntHistogramDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleHistogramDataPoint::_Internal {
 public:
};

void DoubleHistogramDataPoint::clear_labels() {
  labels_.Clear();
}
DoubleHistogramDataPoint::DoubleHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  bucket_counts_(arena),
  explicit_bounds_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
}
DoubleHistogramDataPoint::DoubleHistogramDataPoint(const DoubleHistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      bucket_counts_(from.bucket_counts_),
      explicit_bounds_(from.explicit_bounds_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
}

void DoubleHistogramDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
}

DoubleHistogramDataPoint::~DoubleHistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleHistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleHistogramDataPoint::ArenaDtor(void* object) {
  DoubleHistogramDataPoint* _this = reinterpret_cast< DoubleHistogramDataPoint* >(object);
  (void)_this;
}
void DoubleHistogramDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleHistogramDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleHistogramDataPoint& DoubleHistogramDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleHistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  bucket_counts_.Clear();
  explicit_bounds_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleHistogramDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 bucket_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated double explicit_bounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_explicit_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_explicit_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleHistogramDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum(), target);
  }

  // repeated fixed64 bucket_counts = 6;
  if (this->_internal_bucket_counts_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_counts(), target);
  }

  // repeated double explicit_bounds = 7;
  if (this->_internal_explicit_bounds_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_explicit_bounds(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  return target;
}

size_t DoubleHistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 bucket_counts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double explicit_bounds = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_explicit_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _explicit_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 8;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleHistogramDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleHistogramDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleHistogramDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
    MergeFrom(*source);
  }
}

void DoubleHistogramDataPoint::MergeFrom(const DoubleHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  bucket_counts_.MergeFrom(from.bucket_counts_);
  explicit_bounds_.MergeFrom(from.explicit_bounds_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
}

void DoubleHistogramDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleHistogramDataPoint::CopyFrom(const DoubleHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleHistogramDataPoint::IsInitialized() const {
  return true;
}

void DoubleHistogramDataPoint::InternalSwap(DoubleHistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  explicit_bounds_.InternalSwap(&other->explicit_bounds_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleHistogramDataPoint, sum_)
      + sizeof(DoubleHistogramDataPoint::sum_)
      - PROTOBUF_FIELD_OFFSET(DoubleHistogramDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleHistogramDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleSummaryDataPoint_ValueAtQuantile::_Internal {
 public:
};

DoubleSummaryDataPoint_ValueAtQuantile::DoubleSummaryDataPoint_ValueAtQuantile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
}
DoubleSummaryDataPoint_ValueAtQuantile::DoubleSummaryDataPoint_ValueAtQuantile(const DoubleSummaryDataPoint_ValueAtQuantile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quantile_, &from.quantile_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
}

void DoubleSummaryDataPoint_ValueAtQuantile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&quantile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
}

DoubleSummaryDataPoint_ValueAtQuantile::~DoubleSummaryDataPoint_ValueAtQuantile() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleSummaryDataPoint_ValueAtQuantile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleSummaryDataPoint_ValueAtQuantile::ArenaDtor(void* object) {
  DoubleSummaryDataPoint_ValueAtQuantile* _this = reinterpret_cast< DoubleSummaryDataPoint_ValueAtQuantile* >(object);
  (void)_this;
}
void DoubleSummaryDataPoint_ValueAtQuantile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleSummaryDataPoint_ValueAtQuantile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleSummaryDataPoint_ValueAtQuantile& DoubleSummaryDataPoint_ValueAtQuantile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleSummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleSummaryDataPoint_ValueAtQuantile::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quantile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleSummaryDataPoint_ValueAtQuantile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double quantile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          quantile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSummaryDataPoint_ValueAtQuantile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quantile = 1;
  if (!(this->quantile() <= 0 && this->quantile() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_quantile(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  return target;
}

size_t DoubleSummaryDataPoint_ValueAtQuantile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double quantile = 1;
  if (!(this->quantile() <= 0 && this->quantile() >= 0)) {
    total_size += 1 + 8;
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSummaryDataPoint_ValueAtQuantile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSummaryDataPoint_ValueAtQuantile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSummaryDataPoint_ValueAtQuantile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
    MergeFrom(*source);
  }
}

void DoubleSummaryDataPoint_ValueAtQuantile::MergeFrom(const DoubleSummaryDataPoint_ValueAtQuantile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.quantile() <= 0 && from.quantile() >= 0)) {
    _internal_set_quantile(from._internal_quantile());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void DoubleSummaryDataPoint_ValueAtQuantile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSummaryDataPoint_ValueAtQuantile::CopyFrom(const DoubleSummaryDataPoint_ValueAtQuantile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSummaryDataPoint_ValueAtQuantile::IsInitialized() const {
  return true;
}

void DoubleSummaryDataPoint_ValueAtQuantile::InternalSwap(DoubleSummaryDataPoint_ValueAtQuantile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleSummaryDataPoint_ValueAtQuantile, value_)
      + sizeof(DoubleSummaryDataPoint_ValueAtQuantile::value_)
      - PROTOBUF_FIELD_OFFSET(DoubleSummaryDataPoint_ValueAtQuantile, quantile_)>(
          reinterpret_cast<char*>(&quantile_),
          reinterpret_cast<char*>(&other->quantile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSummaryDataPoint_ValueAtQuantile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleSummaryDataPoint::_Internal {
 public:
};

void DoubleSummaryDataPoint::clear_labels() {
  labels_.Clear();
}
DoubleSummaryDataPoint::DoubleSummaryDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  quantile_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
}
DoubleSummaryDataPoint::DoubleSummaryDataPoint(const DoubleSummaryDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      quantile_values_(from.quantile_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
}

void DoubleSummaryDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
}

DoubleSummaryDataPoint::~DoubleSummaryDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleSummaryDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DoubleSummaryDataPoint::ArenaDtor(void* object) {
  DoubleSummaryDataPoint* _this = reinterpret_cast< DoubleSummaryDataPoint* >(object);
  (void)_this;
}
void DoubleSummaryDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleSummaryDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleSummaryDataPoint& DoubleSummaryDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleSummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleSummaryDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  quantile_values_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleSummaryDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile quantile_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantile_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSummaryDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile quantile_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantile_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_quantile_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  return target;
}

size_t DoubleSummaryDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile quantile_values = 6;
  total_size += 1UL * this->_internal_quantile_values_size();
  for (const auto& msg : this->quantile_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSummaryDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSummaryDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSummaryDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
    MergeFrom(*source);
  }
}

void DoubleSummaryDataPoint::MergeFrom(const DoubleSummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  quantile_values_.MergeFrom(from.quantile_values_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
}

void DoubleSummaryDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSummaryDataPoint::CopyFrom(const DoubleSummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSummaryDataPoint::IsInitialized() const {
  return true;
}

void DoubleSummaryDataPoint::InternalSwap(DoubleSummaryDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  quantile_values_.InternalSwap(&other->quantile_values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleSummaryDataPoint, sum_)
      + sizeof(DoubleSummaryDataPoint::sum_)
      - PROTOBUF_FIELD_OFFSET(DoubleSummaryDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSummaryDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntExemplar::_Internal {
 public:
};

void IntExemplar::clear_filtered_labels() {
  filtered_labels_.Clear();
}
IntExemplar::IntExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filtered_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntExemplar)
}
IntExemplar::IntExemplar(const IntExemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filtered_labels_(from.filtered_labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  ::memcpy(&time_unix_nano_, &from.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntExemplar)
}

void IntExemplar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
}

IntExemplar::~IntExemplar() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntExemplar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntExemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntExemplar::ArenaDtor(void* object) {
  IntExemplar* _this = reinterpret_cast< IntExemplar* >(object);
  (void)_this;
}
void IntExemplar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntExemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntExemplar& IntExemplar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntExemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filtered_labels_.Clear();
  span_id_.ClearToEmpty();
  trace_id_.ClearToEmpty();
  ::memset(&time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntExemplar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntExemplar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filtered_labels(i), target, stream);
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_unix_nano(), target);
  }

  // sfixed64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_value(), target);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_span_id(), target);
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntExemplar)
  return target;
}

size_t IntExemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntExemplar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  total_size += 1UL * this->_internal_filtered_labels_size();
  for (const auto& msg : this->filtered_labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntExemplar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  const IntExemplar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntExemplar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntExemplar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntExemplar)
    MergeFrom(*source);
  }
}

void IntExemplar::MergeFrom(const IntExemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filtered_labels_.MergeFrom(from.filtered_labels_);
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntExemplar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntExemplar::CopyFrom(const IntExemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntExemplar::IsInitialized() const {
  return true;
}

void IntExemplar::InternalSwap(IntExemplar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filtered_labels_.InternalSwap(&other->filtered_labels_);
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntExemplar, value_)
      + sizeof(IntExemplar::value_)
      - PROTOBUF_FIELD_OFFSET(IntExemplar, time_unix_nano_)>(
          reinterpret_cast<char*>(&time_unix_nano_),
          reinterpret_cast<char*>(&other->time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntExemplar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DoubleExemplar::_Internal {
 public:
};

void DoubleExemplar::clear_filtered_labels() {
  filtered_labels_.Clear();
}
DoubleExemplar::DoubleExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filtered_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.DoubleExemplar)
}
DoubleExemplar::DoubleExemplar(const DoubleExemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filtered_labels_(from.filtered_labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  ::memcpy(&time_unix_nano_, &from.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.DoubleExemplar)
}

void DoubleExemplar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
}

DoubleExemplar::~DoubleExemplar() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.DoubleExemplar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DoubleExemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DoubleExemplar::ArenaDtor(void* object) {
  DoubleExemplar* _this = reinterpret_cast< DoubleExemplar* >(object);
  (void)_this;
}
void DoubleExemplar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DoubleExemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleExemplar& DoubleExemplar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void DoubleExemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filtered_labels_.Clear();
  span_id_.ClearToEmpty();
  trace_id_.ClearToEmpty();
  ::memset(&time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleExemplar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleExemplar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filtered_labels(i), target, stream);
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_unix_nano(), target);
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_span_id(), target);
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.DoubleExemplar)
  return target;
}

size_t DoubleExemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  total_size += 1UL * this->_internal_filtered_labels_size();
  for (const auto& msg : this->filtered_labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleExemplar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleExemplar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleExemplar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.DoubleExemplar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.DoubleExemplar)
    MergeFrom(*source);
  }
}

void DoubleExemplar::MergeFrom(const DoubleExemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filtered_labels_.MergeFrom(from.filtered_labels_);
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void DoubleExemplar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleExemplar::CopyFrom(const DoubleExemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.DoubleExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleExemplar::IsInitialized() const {
  return true;
}

void DoubleExemplar::InternalSwap(DoubleExemplar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filtered_labels_.InternalSwap(&other->filtered_labels_);
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DoubleExemplar, value_)
      + sizeof(DoubleExemplar::value_)
      - PROTOBUF_FIELD_OFFSET(DoubleExemplar, time_unix_nano_)>(
          reinterpret_cast<char*>(&time_unix_nano_),
          reinterpret_cast<char*>(&other->time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleExemplar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::ResourceMetrics* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ResourceMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::ResourceMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Metric* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntGauge* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntGauge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntGauge >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleGauge* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleGauge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleGauge >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntSum* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntSum >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleSum* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleSum >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntHistogram* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntHistogram >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleHistogram* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleHistogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleHistogram >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleSummary* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntExemplar* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntExemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntExemplar >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::DoubleExemplar* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleExemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::DoubleExemplar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
