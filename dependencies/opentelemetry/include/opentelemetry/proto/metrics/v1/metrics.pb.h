// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
class DoubleDataPoint;
class DoubleDataPointDefaultTypeInternal;
extern DoubleDataPointDefaultTypeInternal _DoubleDataPoint_default_instance_;
class DoubleExemplar;
class DoubleExemplarDefaultTypeInternal;
extern DoubleExemplarDefaultTypeInternal _DoubleExemplar_default_instance_;
class DoubleGauge;
class DoubleGaugeDefaultTypeInternal;
extern DoubleGaugeDefaultTypeInternal _DoubleGauge_default_instance_;
class DoubleHistogram;
class DoubleHistogramDefaultTypeInternal;
extern DoubleHistogramDefaultTypeInternal _DoubleHistogram_default_instance_;
class DoubleHistogramDataPoint;
class DoubleHistogramDataPointDefaultTypeInternal;
extern DoubleHistogramDataPointDefaultTypeInternal _DoubleHistogramDataPoint_default_instance_;
class DoubleSum;
class DoubleSumDefaultTypeInternal;
extern DoubleSumDefaultTypeInternal _DoubleSum_default_instance_;
class DoubleSummary;
class DoubleSummaryDefaultTypeInternal;
extern DoubleSummaryDefaultTypeInternal _DoubleSummary_default_instance_;
class DoubleSummaryDataPoint;
class DoubleSummaryDataPointDefaultTypeInternal;
extern DoubleSummaryDataPointDefaultTypeInternal _DoubleSummaryDataPoint_default_instance_;
class DoubleSummaryDataPoint_ValueAtQuantile;
class DoubleSummaryDataPoint_ValueAtQuantileDefaultTypeInternal;
extern DoubleSummaryDataPoint_ValueAtQuantileDefaultTypeInternal _DoubleSummaryDataPoint_ValueAtQuantile_default_instance_;
class InstrumentationLibraryMetrics;
class InstrumentationLibraryMetricsDefaultTypeInternal;
extern InstrumentationLibraryMetricsDefaultTypeInternal _InstrumentationLibraryMetrics_default_instance_;
class IntDataPoint;
class IntDataPointDefaultTypeInternal;
extern IntDataPointDefaultTypeInternal _IntDataPoint_default_instance_;
class IntExemplar;
class IntExemplarDefaultTypeInternal;
extern IntExemplarDefaultTypeInternal _IntExemplar_default_instance_;
class IntGauge;
class IntGaugeDefaultTypeInternal;
extern IntGaugeDefaultTypeInternal _IntGauge_default_instance_;
class IntHistogram;
class IntHistogramDefaultTypeInternal;
extern IntHistogramDefaultTypeInternal _IntHistogram_default_instance_;
class IntHistogramDataPoint;
class IntHistogramDataPointDefaultTypeInternal;
extern IntHistogramDataPointDefaultTypeInternal _IntHistogramDataPoint_default_instance_;
class IntSum;
class IntSumDefaultTypeInternal;
extern IntSumDefaultTypeInternal _IntSum_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class ResourceMetrics;
class ResourceMetricsDefaultTypeInternal;
extern ResourceMetricsDefaultTypeInternal _ResourceMetrics_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::metrics::v1::DoubleDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleExemplar* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleExemplar>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleGauge* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleGauge>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleHistogram* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleHistogram>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleSum* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleSum>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleSummary* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleSummary>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntExemplar* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntExemplar>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntGauge* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntGauge>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntHistogram* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntHistogram>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntHistogramDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntSum* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntSum>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Metric* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Metric>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::ResourceMetrics* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ResourceMetrics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {

enum AggregationTemporality : int {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
  AGGREGATION_TEMPORALITY_DELTA = 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
  AggregationTemporality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggregationTemporality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggregationTemporality_IsValid(int value);
constexpr AggregationTemporality AggregationTemporality_MIN = AGGREGATION_TEMPORALITY_UNSPECIFIED;
constexpr AggregationTemporality AggregationTemporality_MAX = AGGREGATION_TEMPORALITY_CUMULATIVE;
constexpr int AggregationTemporality_ARRAYSIZE = AggregationTemporality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor();
template<typename T>
inline const std::string& AggregationTemporality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregationTemporality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregationTemporality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregationTemporality_descriptor(), enum_t_value);
}
inline bool AggregationTemporality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregationTemporality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregationTemporality>(
    AggregationTemporality_descriptor(), name, value);
}
// ===================================================================

class ResourceMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ResourceMetrics) */ {
 public:
  inline ResourceMetrics() : ResourceMetrics(nullptr) {}
  virtual ~ResourceMetrics();

  ResourceMetrics(const ResourceMetrics& from);
  ResourceMetrics(ResourceMetrics&& from) noexcept
    : ResourceMetrics() {
    *this = ::std::move(from);
  }

  inline ResourceMetrics& operator=(const ResourceMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMetrics& operator=(ResourceMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceMetrics& default_instance();

  static inline const ResourceMetrics* internal_default_instance() {
    return reinterpret_cast<const ResourceMetrics*>(
               &_ResourceMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourceMetrics& a, ResourceMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceMetrics* New() const final {
    return CreateMaybeMessage<ResourceMetrics>(nullptr);
  }

  ResourceMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceMetrics& from);
  void MergeFrom(const ResourceMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.ResourceMetrics";
  }
  protected:
  explicit ResourceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentationLibraryMetricsFieldNumber = 2,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  int instrumentation_library_metrics_size() const;
  private:
  int _internal_instrumentation_library_metrics_size() const;
  public:
  void clear_instrumentation_library_metrics();
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* mutable_instrumentation_library_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >*
      mutable_instrumentation_library_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& _internal_instrumentation_library_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* _internal_add_instrumentation_library_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& instrumentation_library_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* add_instrumentation_library_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >&
      instrumentation_library_metrics() const;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ResourceMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics > instrumentation_library_metrics_;
  ::opentelemetry::proto::resource::v1::Resource* resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class InstrumentationLibraryMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics) */ {
 public:
  inline InstrumentationLibraryMetrics() : InstrumentationLibraryMetrics(nullptr) {}
  virtual ~InstrumentationLibraryMetrics();

  InstrumentationLibraryMetrics(const InstrumentationLibraryMetrics& from);
  InstrumentationLibraryMetrics(InstrumentationLibraryMetrics&& from) noexcept
    : InstrumentationLibraryMetrics() {
    *this = ::std::move(from);
  }

  inline InstrumentationLibraryMetrics& operator=(const InstrumentationLibraryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentationLibraryMetrics& operator=(InstrumentationLibraryMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentationLibraryMetrics& default_instance();

  static inline const InstrumentationLibraryMetrics* internal_default_instance() {
    return reinterpret_cast<const InstrumentationLibraryMetrics*>(
               &_InstrumentationLibraryMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstrumentationLibraryMetrics& a, InstrumentationLibraryMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentationLibraryMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentationLibraryMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentationLibraryMetrics* New() const final {
    return CreateMaybeMessage<InstrumentationLibraryMetrics>(nullptr);
  }

  InstrumentationLibraryMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentationLibraryMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentationLibraryMetrics& from);
  void MergeFrom(const InstrumentationLibraryMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentationLibraryMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics";
  }
  protected:
  explicit InstrumentationLibraryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kInstrumentationLibraryFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::opentelemetry::proto::metrics::v1::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >*
      mutable_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::Metric& _internal_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::Metric* _internal_add_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::Metric& metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >&
      metrics() const;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  bool has_instrumentation_library() const;
  private:
  bool _internal_has_instrumentation_library() const;
  public:
  void clear_instrumentation_library();
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* release_instrumentation_library();
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* mutable_instrumentation_library();
  void set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& _internal_instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* _internal_mutable_instrumentation_library();
  public:
  void unsafe_arena_set_allocated_instrumentation_library(
      ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* unsafe_arena_release_instrumentation_library();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric > metrics_;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  enum DataCase {
    kIntGauge = 4,
    kDoubleGauge = 5,
    kIntSum = 6,
    kDoubleSum = 7,
    kIntHistogram = 8,
    kDoubleHistogram = 9,
    kDoubleSummary = 11,
    DATA_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 3,
    kIntGaugeFieldNumber = 4,
    kDoubleGaugeFieldNumber = 5,
    kIntSumFieldNumber = 6,
    kDoubleSumFieldNumber = 7,
    kIntHistogramFieldNumber = 8,
    kDoubleHistogramFieldNumber = 9,
    kDoubleSummaryFieldNumber = 11,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string unit = 3;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;
  bool has_int_gauge() const;
  private:
  bool _internal_has_int_gauge() const;
  public:
  void clear_int_gauge();
  const ::opentelemetry::proto::metrics::v1::IntGauge& int_gauge() const;
  ::opentelemetry::proto::metrics::v1::IntGauge* release_int_gauge();
  ::opentelemetry::proto::metrics::v1::IntGauge* mutable_int_gauge();
  void set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge);
  private:
  const ::opentelemetry::proto::metrics::v1::IntGauge& _internal_int_gauge() const;
  ::opentelemetry::proto::metrics::v1::IntGauge* _internal_mutable_int_gauge();
  public:
  void unsafe_arena_set_allocated_int_gauge(
      ::opentelemetry::proto::metrics::v1::IntGauge* int_gauge);
  ::opentelemetry::proto::metrics::v1::IntGauge* unsafe_arena_release_int_gauge();

  // .opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;
  bool has_double_gauge() const;
  private:
  bool _internal_has_double_gauge() const;
  public:
  void clear_double_gauge();
  const ::opentelemetry::proto::metrics::v1::DoubleGauge& double_gauge() const;
  ::opentelemetry::proto::metrics::v1::DoubleGauge* release_double_gauge();
  ::opentelemetry::proto::metrics::v1::DoubleGauge* mutable_double_gauge();
  void set_allocated_double_gauge(::opentelemetry::proto::metrics::v1::DoubleGauge* double_gauge);
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleGauge& _internal_double_gauge() const;
  ::opentelemetry::proto::metrics::v1::DoubleGauge* _internal_mutable_double_gauge();
  public:
  void unsafe_arena_set_allocated_double_gauge(
      ::opentelemetry::proto::metrics::v1::DoubleGauge* double_gauge);
  ::opentelemetry::proto::metrics::v1::DoubleGauge* unsafe_arena_release_double_gauge();

  // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6;
  bool has_int_sum() const;
  private:
  bool _internal_has_int_sum() const;
  public:
  void clear_int_sum();
  const ::opentelemetry::proto::metrics::v1::IntSum& int_sum() const;
  ::opentelemetry::proto::metrics::v1::IntSum* release_int_sum();
  ::opentelemetry::proto::metrics::v1::IntSum* mutable_int_sum();
  void set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum);
  private:
  const ::opentelemetry::proto::metrics::v1::IntSum& _internal_int_sum() const;
  ::opentelemetry::proto::metrics::v1::IntSum* _internal_mutable_int_sum();
  public:
  void unsafe_arena_set_allocated_int_sum(
      ::opentelemetry::proto::metrics::v1::IntSum* int_sum);
  ::opentelemetry::proto::metrics::v1::IntSum* unsafe_arena_release_int_sum();

  // .opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;
  bool has_double_sum() const;
  private:
  bool _internal_has_double_sum() const;
  public:
  void clear_double_sum();
  const ::opentelemetry::proto::metrics::v1::DoubleSum& double_sum() const;
  ::opentelemetry::proto::metrics::v1::DoubleSum* release_double_sum();
  ::opentelemetry::proto::metrics::v1::DoubleSum* mutable_double_sum();
  void set_allocated_double_sum(::opentelemetry::proto::metrics::v1::DoubleSum* double_sum);
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleSum& _internal_double_sum() const;
  ::opentelemetry::proto::metrics::v1::DoubleSum* _internal_mutable_double_sum();
  public:
  void unsafe_arena_set_allocated_double_sum(
      ::opentelemetry::proto::metrics::v1::DoubleSum* double_sum);
  ::opentelemetry::proto::metrics::v1::DoubleSum* unsafe_arena_release_double_sum();

  // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;
  bool has_int_histogram() const;
  private:
  bool _internal_has_int_histogram() const;
  public:
  void clear_int_histogram();
  const ::opentelemetry::proto::metrics::v1::IntHistogram& int_histogram() const;
  ::opentelemetry::proto::metrics::v1::IntHistogram* release_int_histogram();
  ::opentelemetry::proto::metrics::v1::IntHistogram* mutable_int_histogram();
  void set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram);
  private:
  const ::opentelemetry::proto::metrics::v1::IntHistogram& _internal_int_histogram() const;
  ::opentelemetry::proto::metrics::v1::IntHistogram* _internal_mutable_int_histogram();
  public:
  void unsafe_arena_set_allocated_int_histogram(
      ::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram);
  ::opentelemetry::proto::metrics::v1::IntHistogram* unsafe_arena_release_int_histogram();

  // .opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;
  bool has_double_histogram() const;
  private:
  bool _internal_has_double_histogram() const;
  public:
  void clear_double_histogram();
  const ::opentelemetry::proto::metrics::v1::DoubleHistogram& double_histogram() const;
  ::opentelemetry::proto::metrics::v1::DoubleHistogram* release_double_histogram();
  ::opentelemetry::proto::metrics::v1::DoubleHistogram* mutable_double_histogram();
  void set_allocated_double_histogram(::opentelemetry::proto::metrics::v1::DoubleHistogram* double_histogram);
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleHistogram& _internal_double_histogram() const;
  ::opentelemetry::proto::metrics::v1::DoubleHistogram* _internal_mutable_double_histogram();
  public:
  void unsafe_arena_set_allocated_double_histogram(
      ::opentelemetry::proto::metrics::v1::DoubleHistogram* double_histogram);
  ::opentelemetry::proto::metrics::v1::DoubleHistogram* unsafe_arena_release_double_histogram();

  // .opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;
  bool has_double_summary() const;
  private:
  bool _internal_has_double_summary() const;
  public:
  void clear_double_summary();
  const ::opentelemetry::proto::metrics::v1::DoubleSummary& double_summary() const;
  ::opentelemetry::proto::metrics::v1::DoubleSummary* release_double_summary();
  ::opentelemetry::proto::metrics::v1::DoubleSummary* mutable_double_summary();
  void set_allocated_double_summary(::opentelemetry::proto::metrics::v1::DoubleSummary* double_summary);
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleSummary& _internal_double_summary() const;
  ::opentelemetry::proto::metrics::v1::DoubleSummary* _internal_mutable_double_summary();
  public:
  void unsafe_arena_set_allocated_double_summary(
      ::opentelemetry::proto::metrics::v1::DoubleSummary* double_summary);
  ::opentelemetry::proto::metrics::v1::DoubleSummary* unsafe_arena_release_double_summary();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Metric)
 private:
  class _Internal;
  void set_has_int_gauge();
  void set_has_double_gauge();
  void set_has_int_sum();
  void set_has_double_sum();
  void set_has_int_histogram();
  void set_has_double_histogram();
  void set_has_double_summary();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  union DataUnion {
    DataUnion() {}
    ::opentelemetry::proto::metrics::v1::IntGauge* int_gauge_;
    ::opentelemetry::proto::metrics::v1::DoubleGauge* double_gauge_;
    ::opentelemetry::proto::metrics::v1::IntSum* int_sum_;
    ::opentelemetry::proto::metrics::v1::DoubleSum* double_sum_;
    ::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram_;
    ::opentelemetry::proto::metrics::v1::DoubleHistogram* double_histogram_;
    ::opentelemetry::proto::metrics::v1::DoubleSummary* double_summary_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntGauge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntGauge) */ {
 public:
  inline IntGauge() : IntGauge(nullptr) {}
  virtual ~IntGauge();

  IntGauge(const IntGauge& from);
  IntGauge(IntGauge&& from) noexcept
    : IntGauge() {
    *this = ::std::move(from);
  }

  inline IntGauge& operator=(const IntGauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntGauge& operator=(IntGauge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntGauge& default_instance();

  static inline const IntGauge* internal_default_instance() {
    return reinterpret_cast<const IntGauge*>(
               &_IntGauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IntGauge& a, IntGauge& b) {
    a.Swap(&b);
  }
  inline void Swap(IntGauge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntGauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntGauge* New() const final {
    return CreateMaybeMessage<IntGauge>(nullptr);
  }

  IntGauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntGauge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntGauge& from);
  void MergeFrom(const IntGauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntGauge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntGauge";
  }
  protected:
  explicit IntGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntGauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleGauge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleGauge) */ {
 public:
  inline DoubleGauge() : DoubleGauge(nullptr) {}
  virtual ~DoubleGauge();

  DoubleGauge(const DoubleGauge& from);
  DoubleGauge(DoubleGauge&& from) noexcept
    : DoubleGauge() {
    *this = ::std::move(from);
  }

  inline DoubleGauge& operator=(const DoubleGauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleGauge& operator=(DoubleGauge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleGauge& default_instance();

  static inline const DoubleGauge* internal_default_instance() {
    return reinterpret_cast<const DoubleGauge*>(
               &_DoubleGauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DoubleGauge& a, DoubleGauge& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleGauge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleGauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleGauge* New() const final {
    return CreateMaybeMessage<DoubleGauge>(nullptr);
  }

  DoubleGauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleGauge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleGauge& from);
  void MergeFrom(const DoubleGauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleGauge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleGauge";
  }
  protected:
  explicit DoubleGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleGauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntSum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntSum) */ {
 public:
  inline IntSum() : IntSum(nullptr) {}
  virtual ~IntSum();

  IntSum(const IntSum& from);
  IntSum(IntSum&& from) noexcept
    : IntSum() {
    *this = ::std::move(from);
  }

  inline IntSum& operator=(const IntSum& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntSum& operator=(IntSum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntSum& default_instance();

  static inline const IntSum* internal_default_instance() {
    return reinterpret_cast<const IntSum*>(
               &_IntSum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IntSum& a, IntSum& b) {
    a.Swap(&b);
  }
  inline void Swap(IntSum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntSum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntSum* New() const final {
    return CreateMaybeMessage<IntSum>(nullptr);
  }

  IntSum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntSum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntSum& from);
  void MergeFrom(const IntSum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntSum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntSum";
  }
  protected:
  explicit IntSum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
    kIsMonotonicFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // bool is_monotonic = 3;
  void clear_is_monotonic();
  bool is_monotonic() const;
  void set_is_monotonic(bool value);
  private:
  bool _internal_is_monotonic() const;
  void _internal_set_is_monotonic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntSum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint > data_points_;
  int aggregation_temporality_;
  bool is_monotonic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleSum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleSum) */ {
 public:
  inline DoubleSum() : DoubleSum(nullptr) {}
  virtual ~DoubleSum();

  DoubleSum(const DoubleSum& from);
  DoubleSum(DoubleSum&& from) noexcept
    : DoubleSum() {
    *this = ::std::move(from);
  }

  inline DoubleSum& operator=(const DoubleSum& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSum& operator=(DoubleSum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleSum& default_instance();

  static inline const DoubleSum* internal_default_instance() {
    return reinterpret_cast<const DoubleSum*>(
               &_DoubleSum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DoubleSum& a, DoubleSum& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleSum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSum* New() const final {
    return CreateMaybeMessage<DoubleSum>(nullptr);
  }

  DoubleSum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSum& from);
  void MergeFrom(const DoubleSum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleSum";
  }
  protected:
  explicit DoubleSum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
    kIsMonotonicFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // bool is_monotonic = 3;
  void clear_is_monotonic();
  bool is_monotonic() const;
  void set_is_monotonic(bool value);
  private:
  bool _internal_is_monotonic() const;
  void _internal_set_is_monotonic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleSum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint > data_points_;
  int aggregation_temporality_;
  bool is_monotonic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntHistogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntHistogram) */ {
 public:
  inline IntHistogram() : IntHistogram(nullptr) {}
  virtual ~IntHistogram();

  IntHistogram(const IntHistogram& from);
  IntHistogram(IntHistogram&& from) noexcept
    : IntHistogram() {
    *this = ::std::move(from);
  }

  inline IntHistogram& operator=(const IntHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntHistogram& operator=(IntHistogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntHistogram& default_instance();

  static inline const IntHistogram* internal_default_instance() {
    return reinterpret_cast<const IntHistogram*>(
               &_IntHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntHistogram& a, IntHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(IntHistogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntHistogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntHistogram* New() const final {
    return CreateMaybeMessage<IntHistogram>(nullptr);
  }

  IntHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntHistogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntHistogram& from);
  void MergeFrom(const IntHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntHistogram";
  }
  protected:
  explicit IntHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntHistogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint > data_points_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleHistogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleHistogram) */ {
 public:
  inline DoubleHistogram() : DoubleHistogram(nullptr) {}
  virtual ~DoubleHistogram();

  DoubleHistogram(const DoubleHistogram& from);
  DoubleHistogram(DoubleHistogram&& from) noexcept
    : DoubleHistogram() {
    *this = ::std::move(from);
  }

  inline DoubleHistogram& operator=(const DoubleHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleHistogram& operator=(DoubleHistogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleHistogram& default_instance();

  static inline const DoubleHistogram* internal_default_instance() {
    return reinterpret_cast<const DoubleHistogram*>(
               &_DoubleHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DoubleHistogram& a, DoubleHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleHistogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleHistogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleHistogram* New() const final {
    return CreateMaybeMessage<DoubleHistogram>(nullptr);
  }

  DoubleHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleHistogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleHistogram& from);
  void MergeFrom(const DoubleHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleHistogram";
  }
  protected:
  explicit DoubleHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleHistogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint > data_points_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleSummary) */ {
 public:
  inline DoubleSummary() : DoubleSummary(nullptr) {}
  virtual ~DoubleSummary();

  DoubleSummary(const DoubleSummary& from);
  DoubleSummary(DoubleSummary&& from) noexcept
    : DoubleSummary() {
    *this = ::std::move(from);
  }

  inline DoubleSummary& operator=(const DoubleSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSummary& operator=(DoubleSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleSummary& default_instance();

  static inline const DoubleSummary* internal_default_instance() {
    return reinterpret_cast<const DoubleSummary*>(
               &_DoubleSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DoubleSummary& a, DoubleSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSummary* New() const final {
    return CreateMaybeMessage<DoubleSummary>(nullptr);
  }

  DoubleSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSummary& from);
  void MergeFrom(const DoubleSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleSummary";
  }
  protected:
  explicit DoubleSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntDataPoint) */ {
 public:
  inline IntDataPoint() : IntDataPoint(nullptr) {}
  virtual ~IntDataPoint();

  IntDataPoint(const IntDataPoint& from);
  IntDataPoint(IntDataPoint&& from) noexcept
    : IntDataPoint() {
    *this = ::std::move(from);
  }

  inline IntDataPoint& operator=(const IntDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntDataPoint& operator=(IntDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntDataPoint& default_instance();

  static inline const IntDataPoint* internal_default_instance() {
    return reinterpret_cast<const IntDataPoint*>(
               &_IntDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IntDataPoint& a, IntDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(IntDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntDataPoint* New() const final {
    return CreateMaybeMessage<IntDataPoint>(nullptr);
  }

  IntDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntDataPoint& from);
  void MergeFrom(const IntDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntDataPoint";
  }
  protected:
  explicit IntDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kExemplarsFieldNumber = 5,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::IntExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 value = 4;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleDataPoint) */ {
 public:
  inline DoubleDataPoint() : DoubleDataPoint(nullptr) {}
  virtual ~DoubleDataPoint();

  DoubleDataPoint(const DoubleDataPoint& from);
  DoubleDataPoint(DoubleDataPoint&& from) noexcept
    : DoubleDataPoint() {
    *this = ::std::move(from);
  }

  inline DoubleDataPoint& operator=(const DoubleDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleDataPoint& operator=(DoubleDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleDataPoint& default_instance();

  static inline const DoubleDataPoint* internal_default_instance() {
    return reinterpret_cast<const DoubleDataPoint*>(
               &_DoubleDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DoubleDataPoint& a, DoubleDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleDataPoint* New() const final {
    return CreateMaybeMessage<DoubleDataPoint>(nullptr);
  }

  DoubleDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleDataPoint& from);
  void MergeFrom(const DoubleDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleDataPoint";
  }
  protected:
  explicit DoubleDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kExemplarsFieldNumber = 5,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double value = 4;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntHistogramDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntHistogramDataPoint) */ {
 public:
  inline IntHistogramDataPoint() : IntHistogramDataPoint(nullptr) {}
  virtual ~IntHistogramDataPoint();

  IntHistogramDataPoint(const IntHistogramDataPoint& from);
  IntHistogramDataPoint(IntHistogramDataPoint&& from) noexcept
    : IntHistogramDataPoint() {
    *this = ::std::move(from);
  }

  inline IntHistogramDataPoint& operator=(const IntHistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntHistogramDataPoint& operator=(IntHistogramDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntHistogramDataPoint& default_instance();

  static inline const IntHistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const IntHistogramDataPoint*>(
               &_IntHistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IntHistogramDataPoint& a, IntHistogramDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(IntHistogramDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntHistogramDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntHistogramDataPoint* New() const final {
    return CreateMaybeMessage<IntHistogramDataPoint>(nullptr);
  }

  IntHistogramDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntHistogramDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntHistogramDataPoint& from);
  void MergeFrom(const IntHistogramDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntHistogramDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntHistogramDataPoint";
  }
  protected:
  explicit IntHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kBucketCountsFieldNumber = 6,
    kExplicitBoundsFieldNumber = 7,
    kExemplarsFieldNumber = 8,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated fixed64 bucket_counts = 6;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;
  public:
  void clear_bucket_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bucket_counts() const;
  void _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bucket_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_counts(int index) const;
  void set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bucket_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bucket_counts();

  // repeated double explicit_bounds = 7;
  int explicit_bounds_size() const;
  private:
  int _internal_explicit_bounds_size() const;
  public:
  void clear_explicit_bounds();
  private:
  double _internal_explicit_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_explicit_bounds() const;
  void _internal_add_explicit_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_explicit_bounds();
  public:
  double explicit_bounds(int index) const;
  void set_explicit_bounds(int index, double value);
  void add_explicit_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      explicit_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_explicit_bounds();

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::IntExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 sum = 5;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int64 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bucket_counts_;
  mutable std::atomic<int> _bucket_counts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > explicit_bounds_;
  mutable std::atomic<int> _explicit_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleHistogramDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint) */ {
 public:
  inline DoubleHistogramDataPoint() : DoubleHistogramDataPoint(nullptr) {}
  virtual ~DoubleHistogramDataPoint();

  DoubleHistogramDataPoint(const DoubleHistogramDataPoint& from);
  DoubleHistogramDataPoint(DoubleHistogramDataPoint&& from) noexcept
    : DoubleHistogramDataPoint() {
    *this = ::std::move(from);
  }

  inline DoubleHistogramDataPoint& operator=(const DoubleHistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleHistogramDataPoint& operator=(DoubleHistogramDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleHistogramDataPoint& default_instance();

  static inline const DoubleHistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const DoubleHistogramDataPoint*>(
               &_DoubleHistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DoubleHistogramDataPoint& a, DoubleHistogramDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleHistogramDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleHistogramDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleHistogramDataPoint* New() const final {
    return CreateMaybeMessage<DoubleHistogramDataPoint>(nullptr);
  }

  DoubleHistogramDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleHistogramDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleHistogramDataPoint& from);
  void MergeFrom(const DoubleHistogramDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleHistogramDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint";
  }
  protected:
  explicit DoubleHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kBucketCountsFieldNumber = 6,
    kExplicitBoundsFieldNumber = 7,
    kExemplarsFieldNumber = 8,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated fixed64 bucket_counts = 6;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;
  public:
  void clear_bucket_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bucket_counts() const;
  void _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bucket_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_counts(int index) const;
  void set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bucket_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bucket_counts();

  // repeated double explicit_bounds = 7;
  int explicit_bounds_size() const;
  private:
  int _internal_explicit_bounds_size() const;
  public:
  void clear_explicit_bounds();
  private:
  double _internal_explicit_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_explicit_bounds() const;
  void _internal_add_explicit_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_explicit_bounds();
  public:
  double explicit_bounds(int index) const;
  void set_explicit_bounds(int index, double value);
  void add_explicit_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      explicit_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_explicit_bounds();

  // repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 8;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double sum = 5;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bucket_counts_;
  mutable std::atomic<int> _bucket_counts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > explicit_bounds_;
  mutable std::atomic<int> _explicit_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleSummaryDataPoint_ValueAtQuantile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile) */ {
 public:
  inline DoubleSummaryDataPoint_ValueAtQuantile() : DoubleSummaryDataPoint_ValueAtQuantile(nullptr) {}
  virtual ~DoubleSummaryDataPoint_ValueAtQuantile();

  DoubleSummaryDataPoint_ValueAtQuantile(const DoubleSummaryDataPoint_ValueAtQuantile& from);
  DoubleSummaryDataPoint_ValueAtQuantile(DoubleSummaryDataPoint_ValueAtQuantile&& from) noexcept
    : DoubleSummaryDataPoint_ValueAtQuantile() {
    *this = ::std::move(from);
  }

  inline DoubleSummaryDataPoint_ValueAtQuantile& operator=(const DoubleSummaryDataPoint_ValueAtQuantile& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSummaryDataPoint_ValueAtQuantile& operator=(DoubleSummaryDataPoint_ValueAtQuantile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleSummaryDataPoint_ValueAtQuantile& default_instance();

  static inline const DoubleSummaryDataPoint_ValueAtQuantile* internal_default_instance() {
    return reinterpret_cast<const DoubleSummaryDataPoint_ValueAtQuantile*>(
               &_DoubleSummaryDataPoint_ValueAtQuantile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DoubleSummaryDataPoint_ValueAtQuantile& a, DoubleSummaryDataPoint_ValueAtQuantile& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleSummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSummaryDataPoint_ValueAtQuantile* New() const final {
    return CreateMaybeMessage<DoubleSummaryDataPoint_ValueAtQuantile>(nullptr);
  }

  DoubleSummaryDataPoint_ValueAtQuantile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSummaryDataPoint_ValueAtQuantile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSummaryDataPoint_ValueAtQuantile& from);
  void MergeFrom(const DoubleSummaryDataPoint_ValueAtQuantile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSummaryDataPoint_ValueAtQuantile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile";
  }
  protected:
  explicit DoubleSummaryDataPoint_ValueAtQuantile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantileFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double quantile = 1;
  void clear_quantile();
  double quantile() const;
  void set_quantile(double value);
  private:
  double _internal_quantile() const;
  void _internal_set_quantile(double value);
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double quantile_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleSummaryDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint) */ {
 public:
  inline DoubleSummaryDataPoint() : DoubleSummaryDataPoint(nullptr) {}
  virtual ~DoubleSummaryDataPoint();

  DoubleSummaryDataPoint(const DoubleSummaryDataPoint& from);
  DoubleSummaryDataPoint(DoubleSummaryDataPoint&& from) noexcept
    : DoubleSummaryDataPoint() {
    *this = ::std::move(from);
  }

  inline DoubleSummaryDataPoint& operator=(const DoubleSummaryDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSummaryDataPoint& operator=(DoubleSummaryDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleSummaryDataPoint& default_instance();

  static inline const DoubleSummaryDataPoint* internal_default_instance() {
    return reinterpret_cast<const DoubleSummaryDataPoint*>(
               &_DoubleSummaryDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DoubleSummaryDataPoint& a, DoubleSummaryDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSummaryDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleSummaryDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSummaryDataPoint* New() const final {
    return CreateMaybeMessage<DoubleSummaryDataPoint>(nullptr);
  }

  DoubleSummaryDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSummaryDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSummaryDataPoint& from);
  void MergeFrom(const DoubleSummaryDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSummaryDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint";
  }
  protected:
  explicit DoubleSummaryDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DoubleSummaryDataPoint_ValueAtQuantile ValueAtQuantile;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kQuantileValuesFieldNumber = 6,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile quantile_values = 6;
  int quantile_values_size() const;
  private:
  int _internal_quantile_values_size() const;
  public:
  void clear_quantile_values();
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* mutable_quantile_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >*
      mutable_quantile_values();
  private:
  const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile& _internal_quantile_values(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* _internal_add_quantile_values();
  public:
  const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile& quantile_values(int index) const;
  ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* add_quantile_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >&
      quantile_values() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double sum = 5;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile > quantile_values_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntExemplar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntExemplar) */ {
 public:
  inline IntExemplar() : IntExemplar(nullptr) {}
  virtual ~IntExemplar();

  IntExemplar(const IntExemplar& from);
  IntExemplar(IntExemplar&& from) noexcept
    : IntExemplar() {
    *this = ::std::move(from);
  }

  inline IntExemplar& operator=(const IntExemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntExemplar& operator=(IntExemplar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntExemplar& default_instance();

  static inline const IntExemplar* internal_default_instance() {
    return reinterpret_cast<const IntExemplar*>(
               &_IntExemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IntExemplar& a, IntExemplar& b) {
    a.Swap(&b);
  }
  inline void Swap(IntExemplar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntExemplar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntExemplar* New() const final {
    return CreateMaybeMessage<IntExemplar>(nullptr);
  }

  IntExemplar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntExemplar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntExemplar& from);
  void MergeFrom(const IntExemplar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntExemplar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntExemplar";
  }
  protected:
  explicit IntExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredLabelsFieldNumber = 1,
    kSpanIdFieldNumber = 4,
    kTraceIdFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  int filtered_labels_size() const;
  private:
  int _internal_filtered_labels_size() const;
  public:
  void clear_filtered_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_filtered_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_filtered_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_filtered_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_filtered_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      filtered_labels() const;

  // bytes span_id = 4;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // bytes trace_id = 5;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // fixed64 time_unix_nano = 2;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntExemplar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > filtered_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class DoubleExemplar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.DoubleExemplar) */ {
 public:
  inline DoubleExemplar() : DoubleExemplar(nullptr) {}
  virtual ~DoubleExemplar();

  DoubleExemplar(const DoubleExemplar& from);
  DoubleExemplar(DoubleExemplar&& from) noexcept
    : DoubleExemplar() {
    *this = ::std::move(from);
  }

  inline DoubleExemplar& operator=(const DoubleExemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleExemplar& operator=(DoubleExemplar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleExemplar& default_instance();

  static inline const DoubleExemplar* internal_default_instance() {
    return reinterpret_cast<const DoubleExemplar*>(
               &_DoubleExemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DoubleExemplar& a, DoubleExemplar& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleExemplar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleExemplar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleExemplar* New() const final {
    return CreateMaybeMessage<DoubleExemplar>(nullptr);
  }

  DoubleExemplar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleExemplar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleExemplar& from);
  void MergeFrom(const DoubleExemplar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleExemplar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.DoubleExemplar";
  }
  protected:
  explicit DoubleExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredLabelsFieldNumber = 1,
    kSpanIdFieldNumber = 4,
    kTraceIdFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  int filtered_labels_size() const;
  private:
  int _internal_filtered_labels_size() const;
  public:
  void clear_filtered_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_filtered_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_filtered_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_filtered_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_filtered_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      filtered_labels() const;

  // bytes span_id = 4;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // bytes trace_id = 5;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // fixed64 time_unix_nano = 2;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.DoubleExemplar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > filtered_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourceMetrics

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceMetrics::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool ResourceMetrics::has_resource() const {
  return _internal_has_resource();
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(
      ::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _internal_resource();
}
inline void ResourceMetrics::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::release_resource() {
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _internal_mutable_resource();
}
inline void ResourceMetrics::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}

// repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
inline int ResourceMetrics::_internal_instrumentation_library_metrics_size() const {
  return instrumentation_library_metrics_.size();
}
inline int ResourceMetrics::instrumentation_library_metrics_size() const {
  return _internal_instrumentation_library_metrics_size();
}
inline void ResourceMetrics::clear_instrumentation_library_metrics() {
  instrumentation_library_metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::mutable_instrumentation_library_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return instrumentation_library_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >*
ResourceMetrics::mutable_instrumentation_library_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return &instrumentation_library_metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& ResourceMetrics::_internal_instrumentation_library_metrics(int index) const {
  return instrumentation_library_metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& ResourceMetrics::instrumentation_library_metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return _internal_instrumentation_library_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::_internal_add_instrumentation_library_metrics() {
  return instrumentation_library_metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::add_instrumentation_library_metrics() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return _internal_add_instrumentation_library_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >&
ResourceMetrics::instrumentation_library_metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return instrumentation_library_metrics_;
}

// -------------------------------------------------------------------

// InstrumentationLibraryMetrics

// .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
inline bool InstrumentationLibraryMetrics::_internal_has_instrumentation_library() const {
  return this != internal_default_instance() && instrumentation_library_ != nullptr;
}
inline bool InstrumentationLibraryMetrics::has_instrumentation_library() const {
  return _internal_has_instrumentation_library();
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibraryMetrics::_internal_instrumentation_library() const {
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary* p = instrumentation_library_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationLibrary&>(
      ::opentelemetry::proto::common::v1::_InstrumentationLibrary_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibraryMetrics::instrumentation_library() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  return _internal_instrumentation_library();
}
inline void InstrumentationLibraryMetrics::unsafe_arena_set_allocated_instrumentation_library(
    ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  instrumentation_library_ = instrumentation_library;
  if (instrumentation_library) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::release_instrumentation_library() {
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::unsafe_arena_release_instrumentation_library() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::_internal_mutable_instrumentation_library() {
  
  if (instrumentation_library_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationLibrary>(GetArena());
    instrumentation_library_ = p;
  }
  return instrumentation_library_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::mutable_instrumentation_library() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  return _internal_mutable_instrumentation_library();
}
inline void InstrumentationLibraryMetrics::set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  if (instrumentation_library) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library)->GetArena();
    if (message_arena != submessage_arena) {
      instrumentation_library = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrumentation_library, submessage_arena);
    }
    
  } else {
    
  }
  instrumentation_library_ = instrumentation_library;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
}

// repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
inline int InstrumentationLibraryMetrics::_internal_metrics_size() const {
  return metrics_.size();
}
inline int InstrumentationLibraryMetrics::metrics_size() const {
  return _internal_metrics_size();
}
inline void InstrumentationLibraryMetrics::clear_metrics() {
  metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >*
InstrumentationLibraryMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return &metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::Metric& InstrumentationLibraryMetrics::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::Metric& InstrumentationLibraryMetrics::metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return _internal_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::add_metrics() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >&
InstrumentationLibraryMetrics::metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.name)
  return _internal_name();
}
inline void Metric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.name)
}
inline std::string* Metric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.name)
  return _internal_mutable_name();
}
inline const std::string& Metric::_internal_name() const {
  return name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.name)
}
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.name)
}
inline void Metric::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.name)
}
inline std::string* Metric::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.name)
}

// string description = 2;
inline void Metric::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Metric::description() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.description)
  return _internal_description();
}
inline void Metric::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.description)
}
inline std::string* Metric::mutable_description() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.description)
  return _internal_mutable_description();
}
inline const std::string& Metric::_internal_description() const {
  return description_.Get();
}
inline void Metric::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.description)
}
inline void Metric::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.description)
}
inline void Metric::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.description)
}
inline std::string* Metric::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_description() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.description)
}

// string unit = 3;
inline void Metric::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.unit)
  return _internal_unit();
}
inline void Metric::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline std::string* Metric::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.unit)
  return _internal_mutable_unit();
}
inline const std::string& Metric::_internal_unit() const {
  return unit_.Get();
}
inline void Metric::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline void Metric::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline void Metric::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline std::string* Metric::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.unit)
}

// .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4;
inline bool Metric::_internal_has_int_gauge() const {
  return data_case() == kIntGauge;
}
inline bool Metric::has_int_gauge() const {
  return _internal_has_int_gauge();
}
inline void Metric::set_has_int_gauge() {
  _oneof_case_[0] = kIntGauge;
}
inline void Metric::clear_int_gauge() {
  if (_internal_has_int_gauge()) {
    if (GetArena() == nullptr) {
      delete data_.int_gauge_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::release_int_gauge() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  if (_internal_has_int_gauge()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntGauge* temp = data_.int_gauge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntGauge& Metric::_internal_int_gauge() const {
  return _internal_has_int_gauge()
      ? *data_.int_gauge_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntGauge&>(::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntGauge& Metric::int_gauge() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  return _internal_int_gauge();
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::unsafe_arena_release_int_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  if (_internal_has_int_gauge()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntGauge* temp = data_.int_gauge_;
    data_.int_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge) {
  clear_data();
  if (int_gauge) {
    set_has_int_gauge();
    data_.int_gauge_ = int_gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_gauge)
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::_internal_mutable_int_gauge() {
  if (!_internal_has_int_gauge()) {
    clear_data();
    set_has_int_gauge();
    data_.int_gauge_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntGauge >(GetArena());
  }
  return data_.int_gauge_;
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::mutable_int_gauge() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  return _internal_mutable_int_gauge();
}

// .opentelemetry.proto.metrics.v1.DoubleGauge double_gauge = 5;
inline bool Metric::_internal_has_double_gauge() const {
  return data_case() == kDoubleGauge;
}
inline bool Metric::has_double_gauge() const {
  return _internal_has_double_gauge();
}
inline void Metric::set_has_double_gauge() {
  _oneof_case_[0] = kDoubleGauge;
}
inline void Metric::clear_double_gauge() {
  if (_internal_has_double_gauge()) {
    if (GetArena() == nullptr) {
      delete data_.double_gauge_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::DoubleGauge* Metric::release_double_gauge() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.double_gauge)
  if (_internal_has_double_gauge()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::DoubleGauge* temp = data_.double_gauge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.double_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::DoubleGauge& Metric::_internal_double_gauge() const {
  return _internal_has_double_gauge()
      ? *data_.double_gauge_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::DoubleGauge&>(::opentelemetry::proto::metrics::v1::_DoubleGauge_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleGauge& Metric::double_gauge() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.double_gauge)
  return _internal_double_gauge();
}
inline ::opentelemetry::proto::metrics::v1::DoubleGauge* Metric::unsafe_arena_release_double_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.double_gauge)
  if (_internal_has_double_gauge()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::DoubleGauge* temp = data_.double_gauge_;
    data_.double_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_double_gauge(::opentelemetry::proto::metrics::v1::DoubleGauge* double_gauge) {
  clear_data();
  if (double_gauge) {
    set_has_double_gauge();
    data_.double_gauge_ = double_gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_gauge)
}
inline ::opentelemetry::proto::metrics::v1::DoubleGauge* Metric::_internal_mutable_double_gauge() {
  if (!_internal_has_double_gauge()) {
    clear_data();
    set_has_double_gauge();
    data_.double_gauge_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleGauge >(GetArena());
  }
  return data_.double_gauge_;
}
inline ::opentelemetry::proto::metrics::v1::DoubleGauge* Metric::mutable_double_gauge() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.double_gauge)
  return _internal_mutable_double_gauge();
}

// .opentelemetry.proto.metrics.v1.IntSum int_sum = 6;
inline bool Metric::_internal_has_int_sum() const {
  return data_case() == kIntSum;
}
inline bool Metric::has_int_sum() const {
  return _internal_has_int_sum();
}
inline void Metric::set_has_int_sum() {
  _oneof_case_[0] = kIntSum;
}
inline void Metric::clear_int_sum() {
  if (_internal_has_int_sum()) {
    if (GetArena() == nullptr) {
      delete data_.int_sum_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::release_int_sum() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_sum)
  if (_internal_has_int_sum()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntSum* temp = data_.int_sum_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntSum& Metric::_internal_int_sum() const {
  return _internal_has_int_sum()
      ? *data_.int_sum_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntSum&>(::opentelemetry::proto::metrics::v1::_IntSum_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntSum& Metric::int_sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_sum)
  return _internal_int_sum();
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::unsafe_arena_release_int_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_sum)
  if (_internal_has_int_sum()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntSum* temp = data_.int_sum_;
    data_.int_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum) {
  clear_data();
  if (int_sum) {
    set_has_int_sum();
    data_.int_sum_ = int_sum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_sum)
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::_internal_mutable_int_sum() {
  if (!_internal_has_int_sum()) {
    clear_data();
    set_has_int_sum();
    data_.int_sum_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntSum >(GetArena());
  }
  return data_.int_sum_;
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::mutable_int_sum() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_sum)
  return _internal_mutable_int_sum();
}

// .opentelemetry.proto.metrics.v1.DoubleSum double_sum = 7;
inline bool Metric::_internal_has_double_sum() const {
  return data_case() == kDoubleSum;
}
inline bool Metric::has_double_sum() const {
  return _internal_has_double_sum();
}
inline void Metric::set_has_double_sum() {
  _oneof_case_[0] = kDoubleSum;
}
inline void Metric::clear_double_sum() {
  if (_internal_has_double_sum()) {
    if (GetArena() == nullptr) {
      delete data_.double_sum_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::DoubleSum* Metric::release_double_sum() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.double_sum)
  if (_internal_has_double_sum()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::DoubleSum* temp = data_.double_sum_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.double_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSum& Metric::_internal_double_sum() const {
  return _internal_has_double_sum()
      ? *data_.double_sum_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::DoubleSum&>(::opentelemetry::proto::metrics::v1::_DoubleSum_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSum& Metric::double_sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.double_sum)
  return _internal_double_sum();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSum* Metric::unsafe_arena_release_double_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.double_sum)
  if (_internal_has_double_sum()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::DoubleSum* temp = data_.double_sum_;
    data_.double_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_double_sum(::opentelemetry::proto::metrics::v1::DoubleSum* double_sum) {
  clear_data();
  if (double_sum) {
    set_has_double_sum();
    data_.double_sum_ = double_sum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_sum)
}
inline ::opentelemetry::proto::metrics::v1::DoubleSum* Metric::_internal_mutable_double_sum() {
  if (!_internal_has_double_sum()) {
    clear_data();
    set_has_double_sum();
    data_.double_sum_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSum >(GetArena());
  }
  return data_.double_sum_;
}
inline ::opentelemetry::proto::metrics::v1::DoubleSum* Metric::mutable_double_sum() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.double_sum)
  return _internal_mutable_double_sum();
}

// .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8;
inline bool Metric::_internal_has_int_histogram() const {
  return data_case() == kIntHistogram;
}
inline bool Metric::has_int_histogram() const {
  return _internal_has_int_histogram();
}
inline void Metric::set_has_int_histogram() {
  _oneof_case_[0] = kIntHistogram;
}
inline void Metric::clear_int_histogram() {
  if (_internal_has_int_histogram()) {
    if (GetArena() == nullptr) {
      delete data_.int_histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::release_int_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  if (_internal_has_int_histogram()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntHistogram* temp = data_.int_histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogram& Metric::_internal_int_histogram() const {
  return _internal_has_int_histogram()
      ? *data_.int_histogram_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntHistogram&>(::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogram& Metric::int_histogram() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  return _internal_int_histogram();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::unsafe_arena_release_int_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  if (_internal_has_int_histogram()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntHistogram* temp = data_.int_histogram_;
    data_.int_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram) {
  clear_data();
  if (int_histogram) {
    set_has_int_histogram();
    data_.int_histogram_ = int_histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_histogram)
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::_internal_mutable_int_histogram() {
  if (!_internal_has_int_histogram()) {
    clear_data();
    set_has_int_histogram();
    data_.int_histogram_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogram >(GetArena());
  }
  return data_.int_histogram_;
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::mutable_int_histogram() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  return _internal_mutable_int_histogram();
}

// .opentelemetry.proto.metrics.v1.DoubleHistogram double_histogram = 9;
inline bool Metric::_internal_has_double_histogram() const {
  return data_case() == kDoubleHistogram;
}
inline bool Metric::has_double_histogram() const {
  return _internal_has_double_histogram();
}
inline void Metric::set_has_double_histogram() {
  _oneof_case_[0] = kDoubleHistogram;
}
inline void Metric::clear_double_histogram() {
  if (_internal_has_double_histogram()) {
    if (GetArena() == nullptr) {
      delete data_.double_histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogram* Metric::release_double_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.double_histogram)
  if (_internal_has_double_histogram()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::DoubleHistogram* temp = data_.double_histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.double_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::DoubleHistogram& Metric::_internal_double_histogram() const {
  return _internal_has_double_histogram()
      ? *data_.double_histogram_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::DoubleHistogram&>(::opentelemetry::proto::metrics::v1::_DoubleHistogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleHistogram& Metric::double_histogram() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.double_histogram)
  return _internal_double_histogram();
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogram* Metric::unsafe_arena_release_double_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.double_histogram)
  if (_internal_has_double_histogram()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::DoubleHistogram* temp = data_.double_histogram_;
    data_.double_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_double_histogram(::opentelemetry::proto::metrics::v1::DoubleHistogram* double_histogram) {
  clear_data();
  if (double_histogram) {
    set_has_double_histogram();
    data_.double_histogram_ = double_histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_histogram)
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogram* Metric::_internal_mutable_double_histogram() {
  if (!_internal_has_double_histogram()) {
    clear_data();
    set_has_double_histogram();
    data_.double_histogram_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleHistogram >(GetArena());
  }
  return data_.double_histogram_;
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogram* Metric::mutable_double_histogram() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.double_histogram)
  return _internal_mutable_double_histogram();
}

// .opentelemetry.proto.metrics.v1.DoubleSummary double_summary = 11;
inline bool Metric::_internal_has_double_summary() const {
  return data_case() == kDoubleSummary;
}
inline bool Metric::has_double_summary() const {
  return _internal_has_double_summary();
}
inline void Metric::set_has_double_summary() {
  _oneof_case_[0] = kDoubleSummary;
}
inline void Metric::clear_double_summary() {
  if (_internal_has_double_summary()) {
    if (GetArena() == nullptr) {
      delete data_.double_summary_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummary* Metric::release_double_summary() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.double_summary)
  if (_internal_has_double_summary()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::DoubleSummary* temp = data_.double_summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.double_summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummary& Metric::_internal_double_summary() const {
  return _internal_has_double_summary()
      ? *data_.double_summary_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::DoubleSummary&>(::opentelemetry::proto::metrics::v1::_DoubleSummary_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummary& Metric::double_summary() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.double_summary)
  return _internal_double_summary();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummary* Metric::unsafe_arena_release_double_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.double_summary)
  if (_internal_has_double_summary()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::DoubleSummary* temp = data_.double_summary_;
    data_.double_summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_double_summary(::opentelemetry::proto::metrics::v1::DoubleSummary* double_summary) {
  clear_data();
  if (double_summary) {
    set_has_double_summary();
    data_.double_summary_ = double_summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.double_summary)
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummary* Metric::_internal_mutable_double_summary() {
  if (!_internal_has_double_summary()) {
    clear_data();
    set_has_double_summary();
    data_.double_summary_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::DoubleSummary >(GetArena());
  }
  return data_.double_summary_;
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummary* Metric::mutable_double_summary() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.double_summary)
  return _internal_mutable_double_summary();
}

inline bool Metric::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Metric::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Metric::DataCase Metric::data_case() const {
  return Metric::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IntGauge

// repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
inline int IntGauge::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntGauge::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntGauge::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
IntGauge::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntGauge::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntGauge::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
IntGauge::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// DoubleGauge

// repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
inline int DoubleGauge::_internal_data_points_size() const {
  return data_points_.size();
}
inline int DoubleGauge::data_points_size() const {
  return _internal_data_points_size();
}
inline void DoubleGauge::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleGauge::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleGauge.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >*
DoubleGauge::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleGauge.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& DoubleGauge::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& DoubleGauge::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleGauge.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleGauge::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleGauge::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleGauge.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >&
DoubleGauge::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleGauge.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// IntSum

// repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
inline int IntSum::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntSum::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntSum::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
IntSum::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntSum::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntSum::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
IntSum::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void IntSum::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntSum::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntSum::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void IntSum::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void IntSum::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntSum.aggregation_temporality)
}

// bool is_monotonic = 3;
inline void IntSum::clear_is_monotonic() {
  is_monotonic_ = false;
}
inline bool IntSum::_internal_is_monotonic() const {
  return is_monotonic_;
}
inline bool IntSum::is_monotonic() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.is_monotonic)
  return _internal_is_monotonic();
}
inline void IntSum::_internal_set_is_monotonic(bool value) {
  
  is_monotonic_ = value;
}
inline void IntSum::set_is_monotonic(bool value) {
  _internal_set_is_monotonic(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntSum.is_monotonic)
}

// -------------------------------------------------------------------

// DoubleSum

// repeated .opentelemetry.proto.metrics.v1.DoubleDataPoint data_points = 1;
inline int DoubleSum::_internal_data_points_size() const {
  return data_points_.size();
}
inline int DoubleSum::data_points_size() const {
  return _internal_data_points_size();
}
inline void DoubleSum::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleSum::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleSum.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >*
DoubleSum::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleSum.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& DoubleSum::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleDataPoint& DoubleSum::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSum.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleSum::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleDataPoint* DoubleSum::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleSum.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleDataPoint >&
DoubleSum::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleSum.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void DoubleSum::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality DoubleSum::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality DoubleSum::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSum.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void DoubleSum::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void DoubleSum::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSum.aggregation_temporality)
}

// bool is_monotonic = 3;
inline void DoubleSum::clear_is_monotonic() {
  is_monotonic_ = false;
}
inline bool DoubleSum::_internal_is_monotonic() const {
  return is_monotonic_;
}
inline bool DoubleSum::is_monotonic() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSum.is_monotonic)
  return _internal_is_monotonic();
}
inline void DoubleSum::_internal_set_is_monotonic(bool value) {
  
  is_monotonic_ = value;
}
inline void DoubleSum::set_is_monotonic(bool value) {
  _internal_set_is_monotonic(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSum.is_monotonic)
}

// -------------------------------------------------------------------

// IntHistogram

// repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
inline int IntHistogram::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntHistogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntHistogram::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >*
IntHistogram::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& IntHistogram::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& IntHistogram::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >&
IntHistogram::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void IntHistogram::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntHistogram::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntHistogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void IntHistogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void IntHistogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogram.aggregation_temporality)
}

// -------------------------------------------------------------------

// DoubleHistogram

// repeated .opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint data_points = 1;
inline int DoubleHistogram::_internal_data_points_size() const {
  return data_points_.size();
}
inline int DoubleHistogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void DoubleHistogram::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* DoubleHistogram::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleHistogram.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >*
DoubleHistogram::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleHistogram.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint& DoubleHistogram::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint& DoubleHistogram::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogram.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* DoubleHistogram::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint* DoubleHistogram::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleHistogram.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleHistogramDataPoint >&
DoubleHistogram::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleHistogram.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void DoubleHistogram::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality DoubleHistogram::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality DoubleHistogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void DoubleHistogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void DoubleHistogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogram.aggregation_temporality)
}

// -------------------------------------------------------------------

// DoubleSummary

// repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint data_points = 1;
inline int DoubleSummary::_internal_data_points_size() const {
  return data_points_.size();
}
inline int DoubleSummary::data_points_size() const {
  return _internal_data_points_size();
}
inline void DoubleSummary::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* DoubleSummary::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleSummary.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >*
DoubleSummary::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleSummary.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint& DoubleSummary::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint& DoubleSummary::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummary.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* DoubleSummary::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint* DoubleSummary::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleSummary.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint >&
DoubleSummary::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleSummary.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// IntDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int IntDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int IntDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void IntDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void IntDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void IntDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void IntDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.time_unix_nano)
}

// sfixed64 value = 4;
inline void IntDataPoint::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntDataPoint::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntDataPoint::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.value)
  return _internal_value();
}
inline void IntDataPoint::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void IntDataPoint::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.value)
}

// repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
inline int IntDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int IntDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void IntDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
IntDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
IntDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// DoubleDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int DoubleDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int DoubleDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
DoubleDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
DoubleDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void DoubleDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void DoubleDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void DoubleDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void DoubleDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void DoubleDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void DoubleDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleDataPoint.time_unix_nano)
}

// double value = 4;
inline void DoubleDataPoint::clear_value() {
  value_ = 0;
}
inline double DoubleDataPoint::_internal_value() const {
  return value_;
}
inline double DoubleDataPoint::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleDataPoint.value)
  return _internal_value();
}
inline void DoubleDataPoint::_internal_set_value(double value) {
  
  value_ = value;
}
inline void DoubleDataPoint::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleDataPoint.value)
}

// repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 5;
inline int DoubleDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int DoubleDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void DoubleDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >*
DoubleDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleExemplar& DoubleDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleExemplar& DoubleDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >&
DoubleDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// IntHistogramDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int IntHistogramDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int IntHistogramDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntHistogramDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntHistogramDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntHistogramDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntHistogramDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void IntHistogramDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void IntHistogramDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void IntHistogramDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void IntHistogramDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntHistogramDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntHistogramDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void IntHistogramDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.count)
  return _internal_count();
}
inline void IntHistogramDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void IntHistogramDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.count)
}

// sfixed64 sum = 5;
inline void IntHistogramDataPoint::clear_sum() {
  sum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntHistogramDataPoint::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntHistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.sum)
  return _internal_sum();
}
inline void IntHistogramDataPoint::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sum_ = value;
}
inline void IntHistogramDataPoint::set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.sum)
}

// repeated fixed64 bucket_counts = 6;
inline int IntHistogramDataPoint::_internal_bucket_counts_size() const {
  return bucket_counts_.size();
}
inline int IntHistogramDataPoint::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void IntHistogramDataPoint::clear_bucket_counts() {
  bucket_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_bucket_counts(int index) const {
  return bucket_counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts(index);
}
inline void IntHistogramDataPoint::set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
}
inline void IntHistogramDataPoint::_internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Add(value);
}
inline void IntHistogramDataPoint::add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bucket_counts(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IntHistogramDataPoint::_internal_bucket_counts() const {
  return bucket_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IntHistogramDataPoint::bucket_counts() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IntHistogramDataPoint::_internal_mutable_bucket_counts() {
  return &bucket_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IntHistogramDataPoint::mutable_bucket_counts() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_mutable_bucket_counts();
}

// repeated double explicit_bounds = 7;
inline int IntHistogramDataPoint::_internal_explicit_bounds_size() const {
  return explicit_bounds_.size();
}
inline int IntHistogramDataPoint::explicit_bounds_size() const {
  return _internal_explicit_bounds_size();
}
inline void IntHistogramDataPoint::clear_explicit_bounds() {
  explicit_bounds_.Clear();
}
inline double IntHistogramDataPoint::_internal_explicit_bounds(int index) const {
  return explicit_bounds_.Get(index);
}
inline double IntHistogramDataPoint::explicit_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds(index);
}
inline void IntHistogramDataPoint::set_explicit_bounds(int index, double value) {
  explicit_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
}
inline void IntHistogramDataPoint::_internal_add_explicit_bounds(double value) {
  explicit_bounds_.Add(value);
}
inline void IntHistogramDataPoint::add_explicit_bounds(double value) {
  _internal_add_explicit_bounds(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntHistogramDataPoint::_internal_explicit_bounds() const {
  return explicit_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntHistogramDataPoint::explicit_bounds() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntHistogramDataPoint::_internal_mutable_explicit_bounds() {
  return &explicit_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntHistogramDataPoint::mutable_explicit_bounds() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_mutable_explicit_bounds();
}

// repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
inline int IntHistogramDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int IntHistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void IntHistogramDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
IntHistogramDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntHistogramDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntHistogramDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
IntHistogramDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// DoubleHistogramDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int DoubleHistogramDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int DoubleHistogramDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleHistogramDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
DoubleHistogramDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleHistogramDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleHistogramDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleHistogramDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleHistogramDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
DoubleHistogramDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void DoubleHistogramDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void DoubleHistogramDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void DoubleHistogramDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void DoubleHistogramDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void DoubleHistogramDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void DoubleHistogramDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void DoubleHistogramDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.count)
  return _internal_count();
}
inline void DoubleHistogramDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void DoubleHistogramDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.count)
}

// double sum = 5;
inline void DoubleHistogramDataPoint::clear_sum() {
  sum_ = 0;
}
inline double DoubleHistogramDataPoint::_internal_sum() const {
  return sum_;
}
inline double DoubleHistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.sum)
  return _internal_sum();
}
inline void DoubleHistogramDataPoint::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void DoubleHistogramDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.sum)
}

// repeated fixed64 bucket_counts = 6;
inline int DoubleHistogramDataPoint::_internal_bucket_counts_size() const {
  return bucket_counts_.size();
}
inline int DoubleHistogramDataPoint::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void DoubleHistogramDataPoint::clear_bucket_counts() {
  bucket_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::_internal_bucket_counts(int index) const {
  return bucket_counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleHistogramDataPoint::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts(index);
}
inline void DoubleHistogramDataPoint::set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.bucket_counts)
}
inline void DoubleHistogramDataPoint::_internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Add(value);
}
inline void DoubleHistogramDataPoint::add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bucket_counts(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.bucket_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DoubleHistogramDataPoint::_internal_bucket_counts() const {
  return bucket_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
DoubleHistogramDataPoint::bucket_counts() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DoubleHistogramDataPoint::_internal_mutable_bucket_counts() {
  return &bucket_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
DoubleHistogramDataPoint::mutable_bucket_counts() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.bucket_counts)
  return _internal_mutable_bucket_counts();
}

// repeated double explicit_bounds = 7;
inline int DoubleHistogramDataPoint::_internal_explicit_bounds_size() const {
  return explicit_bounds_.size();
}
inline int DoubleHistogramDataPoint::explicit_bounds_size() const {
  return _internal_explicit_bounds_size();
}
inline void DoubleHistogramDataPoint::clear_explicit_bounds() {
  explicit_bounds_.Clear();
}
inline double DoubleHistogramDataPoint::_internal_explicit_bounds(int index) const {
  return explicit_bounds_.Get(index);
}
inline double DoubleHistogramDataPoint::explicit_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds(index);
}
inline void DoubleHistogramDataPoint::set_explicit_bounds(int index, double value) {
  explicit_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.explicit_bounds)
}
inline void DoubleHistogramDataPoint::_internal_add_explicit_bounds(double value) {
  explicit_bounds_.Add(value);
}
inline void DoubleHistogramDataPoint::add_explicit_bounds(double value) {
  _internal_add_explicit_bounds(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.explicit_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleHistogramDataPoint::_internal_explicit_bounds() const {
  return explicit_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleHistogramDataPoint::explicit_bounds() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleHistogramDataPoint::_internal_mutable_explicit_bounds() {
  return &explicit_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleHistogramDataPoint::mutable_explicit_bounds() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.explicit_bounds)
  return _internal_mutable_explicit_bounds();
}

// repeated .opentelemetry.proto.metrics.v1.DoubleExemplar exemplars = 8;
inline int DoubleHistogramDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int DoubleHistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void DoubleHistogramDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleHistogramDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >*
DoubleHistogramDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleExemplar& DoubleHistogramDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleExemplar& DoubleHistogramDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleHistogramDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleExemplar* DoubleHistogramDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleExemplar >&
DoubleHistogramDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleHistogramDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// DoubleSummaryDataPoint_ValueAtQuantile

// double quantile = 1;
inline void DoubleSummaryDataPoint_ValueAtQuantile::clear_quantile() {
  quantile_ = 0;
}
inline double DoubleSummaryDataPoint_ValueAtQuantile::_internal_quantile() const {
  return quantile_;
}
inline double DoubleSummaryDataPoint_ValueAtQuantile::quantile() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile.quantile)
  return _internal_quantile();
}
inline void DoubleSummaryDataPoint_ValueAtQuantile::_internal_set_quantile(double value) {
  
  quantile_ = value;
}
inline void DoubleSummaryDataPoint_ValueAtQuantile::set_quantile(double value) {
  _internal_set_quantile(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile.quantile)
}

// double value = 2;
inline void DoubleSummaryDataPoint_ValueAtQuantile::clear_value() {
  value_ = 0;
}
inline double DoubleSummaryDataPoint_ValueAtQuantile::_internal_value() const {
  return value_;
}
inline double DoubleSummaryDataPoint_ValueAtQuantile::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile.value)
  return _internal_value();
}
inline void DoubleSummaryDataPoint_ValueAtQuantile::_internal_set_value(double value) {
  
  value_ = value;
}
inline void DoubleSummaryDataPoint_ValueAtQuantile::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile.value)
}

// -------------------------------------------------------------------

// DoubleSummaryDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int DoubleSummaryDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int DoubleSummaryDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleSummaryDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
DoubleSummaryDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleSummaryDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleSummaryDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleSummaryDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleSummaryDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
DoubleSummaryDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void DoubleSummaryDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void DoubleSummaryDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void DoubleSummaryDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void DoubleSummaryDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void DoubleSummaryDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void DoubleSummaryDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void DoubleSummaryDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleSummaryDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.count)
  return _internal_count();
}
inline void DoubleSummaryDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void DoubleSummaryDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.count)
}

// double sum = 5;
inline void DoubleSummaryDataPoint::clear_sum() {
  sum_ = 0;
}
inline double DoubleSummaryDataPoint::_internal_sum() const {
  return sum_;
}
inline double DoubleSummaryDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.sum)
  return _internal_sum();
}
inline void DoubleSummaryDataPoint::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void DoubleSummaryDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.sum)
}

// repeated .opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.ValueAtQuantile quantile_values = 6;
inline int DoubleSummaryDataPoint::_internal_quantile_values_size() const {
  return quantile_values_.size();
}
inline int DoubleSummaryDataPoint::quantile_values_size() const {
  return _internal_quantile_values_size();
}
inline void DoubleSummaryDataPoint::clear_quantile_values() {
  quantile_values_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* DoubleSummaryDataPoint::mutable_quantile_values(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.quantile_values)
  return quantile_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >*
DoubleSummaryDataPoint::mutable_quantile_values() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.quantile_values)
  return &quantile_values_;
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile& DoubleSummaryDataPoint::_internal_quantile_values(int index) const {
  return quantile_values_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile& DoubleSummaryDataPoint::quantile_values(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.quantile_values)
  return _internal_quantile_values(index);
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* DoubleSummaryDataPoint::_internal_add_quantile_values() {
  return quantile_values_.Add();
}
inline ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile* DoubleSummaryDataPoint::add_quantile_values() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.quantile_values)
  return _internal_add_quantile_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::DoubleSummaryDataPoint_ValueAtQuantile >&
DoubleSummaryDataPoint::quantile_values() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleSummaryDataPoint.quantile_values)
  return quantile_values_;
}

// -------------------------------------------------------------------

// IntExemplar

// repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
inline int IntExemplar::_internal_filtered_labels_size() const {
  return filtered_labels_.size();
}
inline int IntExemplar::filtered_labels_size() const {
  return _internal_filtered_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::mutable_filtered_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return filtered_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntExemplar::mutable_filtered_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return &filtered_labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntExemplar::_internal_filtered_labels(int index) const {
  return filtered_labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntExemplar::filtered_labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return _internal_filtered_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::_internal_add_filtered_labels() {
  return filtered_labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::add_filtered_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return _internal_add_filtered_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntExemplar::filtered_labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return filtered_labels_;
}

// fixed64 time_unix_nano = 2;
inline void IntExemplar::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntExemplar::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntExemplar::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntExemplar::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntExemplar::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.time_unix_nano)
}

// sfixed64 value = 3;
inline void IntExemplar::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntExemplar::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntExemplar::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.value)
  return _internal_value();
}
inline void IntExemplar::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void IntExemplar::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.value)
}

// bytes span_id = 4;
inline void IntExemplar::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& IntExemplar::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return _internal_span_id();
}
inline void IntExemplar::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline std::string* IntExemplar::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& IntExemplar::_internal_span_id() const {
  return span_id_.Get();
}
inline void IntExemplar::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IntExemplar::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline void IntExemplar::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline void IntExemplar::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline std::string* IntExemplar::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IntExemplar::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntExemplar::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}

// bytes trace_id = 5;
inline void IntExemplar::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& IntExemplar::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return _internal_trace_id();
}
inline void IntExemplar::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline std::string* IntExemplar::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& IntExemplar::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void IntExemplar::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IntExemplar::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline void IntExemplar::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline void IntExemplar::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline std::string* IntExemplar::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IntExemplar::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntExemplar::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}

// -------------------------------------------------------------------

// DoubleExemplar

// repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
inline int DoubleExemplar::_internal_filtered_labels_size() const {
  return filtered_labels_.size();
}
inline int DoubleExemplar::filtered_labels_size() const {
  return _internal_filtered_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleExemplar::mutable_filtered_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleExemplar.filtered_labels)
  return filtered_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
DoubleExemplar::mutable_filtered_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.DoubleExemplar.filtered_labels)
  return &filtered_labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleExemplar::_internal_filtered_labels(int index) const {
  return filtered_labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& DoubleExemplar::filtered_labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleExemplar.filtered_labels)
  return _internal_filtered_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleExemplar::_internal_add_filtered_labels() {
  return filtered_labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* DoubleExemplar::add_filtered_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.DoubleExemplar.filtered_labels)
  return _internal_add_filtered_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
DoubleExemplar::filtered_labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.DoubleExemplar.filtered_labels)
  return filtered_labels_;
}

// fixed64 time_unix_nano = 2;
inline void DoubleExemplar::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleExemplar::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DoubleExemplar::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleExemplar.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void DoubleExemplar::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void DoubleExemplar::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleExemplar.time_unix_nano)
}

// double value = 3;
inline void DoubleExemplar::clear_value() {
  value_ = 0;
}
inline double DoubleExemplar::_internal_value() const {
  return value_;
}
inline double DoubleExemplar::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleExemplar.value)
  return _internal_value();
}
inline void DoubleExemplar::_internal_set_value(double value) {
  
  value_ = value;
}
inline void DoubleExemplar::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleExemplar.value)
}

// bytes span_id = 4;
inline void DoubleExemplar::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& DoubleExemplar::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
  return _internal_span_id();
}
inline void DoubleExemplar::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
}
inline std::string* DoubleExemplar::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& DoubleExemplar::_internal_span_id() const {
  return span_id_.Get();
}
inline void DoubleExemplar::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DoubleExemplar::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
}
inline void DoubleExemplar::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
}
inline void DoubleExemplar::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
}
inline std::string* DoubleExemplar::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DoubleExemplar::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DoubleExemplar::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.DoubleExemplar.span_id)
}

// bytes trace_id = 5;
inline void DoubleExemplar::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& DoubleExemplar::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
  return _internal_trace_id();
}
inline void DoubleExemplar::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
}
inline std::string* DoubleExemplar::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& DoubleExemplar::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void DoubleExemplar::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DoubleExemplar::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
}
inline void DoubleExemplar::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
}
inline void DoubleExemplar::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
}
inline std::string* DoubleExemplar::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DoubleExemplar::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DoubleExemplar::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.DoubleExemplar.trace_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::metrics::v1::AggregationTemporality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::metrics::v1::AggregationTemporality>() {
  return ::opentelemetry::proto::metrics::v1::AggregationTemporality_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
