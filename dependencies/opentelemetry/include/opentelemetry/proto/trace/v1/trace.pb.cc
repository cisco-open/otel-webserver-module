// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

#include "opentelemetry/proto/trace/v1/trace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
class ResourceSpansDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceSpans> _instance;
} _ResourceSpans_default_instance_;
class InstrumentationLibrarySpansDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentationLibrarySpans> _instance;
} _InstrumentationLibrarySpans_default_instance_;
class Span_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Span_Event> _instance;
} _Span_Event_default_instance_;
class Span_LinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Span_Link> _instance;
} _Span_Link_default_instance_;
class SpanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Span> _instance;
} _Span_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_InstrumentationLibrarySpans_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_ResourceSpans_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::ResourceSpans();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto.base,
      &scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_Span_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::Span();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
      &scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,}};

static void InitDefaultsscc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_Span_Event_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::Span_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_Span_Link_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::Span_Link();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::trace::v1::_Status_default_instance_;
    new (ptr) ::opentelemetry::proto::trace::v1::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::ResourceSpans, instrumentation_library_spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans, instrumentation_library_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans, spans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Event, dropped_attributes_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, trace_state_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span_Link, dropped_attributes_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, trace_state_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, parent_span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, kind_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, end_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, dropped_attributes_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, events_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, dropped_events_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, links_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, dropped_links_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Span, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, deprecated_code_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, message_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::trace::v1::Status, code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::trace::v1::ResourceSpans)},
  { 7, -1, sizeof(::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans)},
  { 14, -1, sizeof(::opentelemetry::proto::trace::v1::Span_Event)},
  { 23, -1, sizeof(::opentelemetry::proto::trace::v1::Span_Link)},
  { 33, -1, sizeof(::opentelemetry::proto::trace::v1::Span)},
  { 53, -1, sizeof(::opentelemetry::proto::trace::v1::Status)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_ResourceSpans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_InstrumentationLibrarySpans_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_Span_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_Span_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_Span_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::trace::v1::_Status_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(opentelemetry/proto/trace/v1/trace.pro"
  "to\022\034opentelemetry.proto.trace.v1\032*opente"
  "lemetry/proto/common/v1/common.proto\032.op"
  "entelemetry/proto/resource/v1/resource.p"
  "roto\"\256\001\n\rResourceSpans\022;\n\010resource\030\001 \001(\013"
  "2).opentelemetry.proto.resource.v1.Resou"
  "rce\022`\n\035instrumentation_library_spans\030\002 \003"
  "(\01329.opentelemetry.proto.trace.v1.Instru"
  "mentationLibrarySpans\"\250\001\n\033Instrumentatio"
  "nLibrarySpans\022V\n\027instrumentation_library"
  "\030\001 \001(\01325.opentelemetry.proto.common.v1.I"
  "nstrumentationLibrary\0221\n\005spans\030\002 \003(\0132\".o"
  "pentelemetry.proto.trace.v1.Span\"\346\007\n\004Spa"
  "n\022\020\n\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001(\014\022\023\n\013"
  "trace_state\030\003 \001(\t\022\026\n\016parent_span_id\030\004 \001("
  "\014\022\014\n\004name\030\005 \001(\t\0229\n\004kind\030\006 \001(\0162+.opentele"
  "metry.proto.trace.v1.Span.SpanKind\022\034\n\024st"
  "art_time_unix_nano\030\007 \001(\006\022\032\n\022end_time_uni"
  "x_nano\030\010 \001(\006\022;\n\nattributes\030\t \003(\0132\'.opent"
  "elemetry.proto.common.v1.KeyValue\022 \n\030dro"
  "pped_attributes_count\030\n \001(\r\0228\n\006events\030\013 "
  "\003(\0132(.opentelemetry.proto.trace.v1.Span."
  "Event\022\034\n\024dropped_events_count\030\014 \001(\r\0226\n\005l"
  "inks\030\r \003(\0132\'.opentelemetry.proto.trace.v"
  "1.Span.Link\022\033\n\023dropped_links_count\030\016 \001(\r"
  "\0224\n\006status\030\017 \001(\0132$.opentelemetry.proto.t"
  "race.v1.Status\032\214\001\n\005Event\022\026\n\016time_unix_na"
  "no\030\001 \001(\006\022\014\n\004name\030\002 \001(\t\022;\n\nattributes\030\003 \003"
  "(\0132\'.opentelemetry.proto.common.v1.KeyVa"
  "lue\022 \n\030dropped_attributes_count\030\004 \001(\r\032\235\001"
  "\n\004Link\022\020\n\010trace_id\030\001 \001(\014\022\017\n\007span_id\030\002 \001("
  "\014\022\023\n\013trace_state\030\003 \001(\t\022;\n\nattributes\030\004 \003"
  "(\0132\'.opentelemetry.proto.common.v1.KeyVa"
  "lue\022 \n\030dropped_attributes_count\030\005 \001(\r\"\231\001"
  "\n\010SpanKind\022\031\n\025SPAN_KIND_UNSPECIFIED\020\000\022\026\n"
  "\022SPAN_KIND_INTERNAL\020\001\022\024\n\020SPAN_KIND_SERVE"
  "R\020\002\022\024\n\020SPAN_KIND_CLIENT\020\003\022\026\n\022SPAN_KIND_P"
  "RODUCER\020\004\022\026\n\022SPAN_KIND_CONSUMER\020\005\"\335\007\n\006St"
  "atus\022V\n\017deprecated_code\030\001 \001(\01629.opentele"
  "metry.proto.trace.v1.Status.DeprecatedSt"
  "atusCodeB\002\030\001\022\017\n\007message\030\002 \001(\t\022=\n\004code\030\003 "
  "\001(\0162/.opentelemetry.proto.trace.v1.Statu"
  "s.StatusCode\"\332\005\n\024DeprecatedStatusCode\022\035\n"
  "\031DEPRECATED_STATUS_CODE_OK\020\000\022$\n DEPRECAT"
  "ED_STATUS_CODE_CANCELLED\020\001\022(\n$DEPRECATED"
  "_STATUS_CODE_UNKNOWN_ERROR\020\002\022+\n\'DEPRECAT"
  "ED_STATUS_CODE_INVALID_ARGUMENT\020\003\022,\n(DEP"
  "RECATED_STATUS_CODE_DEADLINE_EXCEEDED\020\004\022"
  "$\n DEPRECATED_STATUS_CODE_NOT_FOUND\020\005\022)\n"
  "%DEPRECATED_STATUS_CODE_ALREADY_EXISTS\020\006"
  "\022,\n(DEPRECATED_STATUS_CODE_PERMISSION_DE"
  "NIED\020\007\022-\n)DEPRECATED_STATUS_CODE_RESOURC"
  "E_EXHAUSTED\020\010\022.\n*DEPRECATED_STATUS_CODE_"
  "FAILED_PRECONDITION\020\t\022\"\n\036DEPRECATED_STAT"
  "US_CODE_ABORTED\020\n\022\'\n#DEPRECATED_STATUS_C"
  "ODE_OUT_OF_RANGE\020\013\022(\n$DEPRECATED_STATUS_"
  "CODE_UNIMPLEMENTED\020\014\022)\n%DEPRECATED_STATU"
  "S_CODE_INTERNAL_ERROR\020\r\022&\n\"DEPRECATED_ST"
  "ATUS_CODE_UNAVAILABLE\020\016\022$\n DEPRECATED_ST"
  "ATUS_CODE_DATA_LOSS\020\017\022*\n&DEPRECATED_STAT"
  "US_CODE_UNAUTHENTICATED\020\020\"N\n\nStatusCode\022"
  "\025\n\021STATUS_CODE_UNSET\020\000\022\022\n\016STATUS_CODE_OK"
  "\020\001\022\025\n\021STATUS_CODE_ERROR\020\002Bn\n\037io.opentele"
  "metry.proto.trace.v1B\nTraceProtoP\001Z=gith"
  "ub.com/open-telemetry/opentelemetry-prot"
  "o/gen/go/trace/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_sccs[6] = {
  &scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
  &scc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
  &scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
  &scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
  &scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
  &scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto, "opentelemetry/proto/trace/v1/trace.proto", 2625,
  &descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_once, descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto, 6, file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_SpanKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[0];
}
bool Span_SpanKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Span_SpanKind Span::SPAN_KIND_UNSPECIFIED;
constexpr Span_SpanKind Span::SPAN_KIND_INTERNAL;
constexpr Span_SpanKind Span::SPAN_KIND_SERVER;
constexpr Span_SpanKind Span::SPAN_KIND_CLIENT;
constexpr Span_SpanKind Span::SPAN_KIND_PRODUCER;
constexpr Span_SpanKind Span::SPAN_KIND_CONSUMER;
constexpr Span_SpanKind Span::SpanKind_MIN;
constexpr Span_SpanKind Span::SpanKind_MAX;
constexpr int Span::SpanKind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_DeprecatedStatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[1];
}
bool Status_DeprecatedStatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_OK;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_CANCELLED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_UNKNOWN_ERROR;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_INVALID_ARGUMENT;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_NOT_FOUND;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_ALREADY_EXISTS;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_PERMISSION_DENIED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_FAILED_PRECONDITION;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_ABORTED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_OUT_OF_RANGE;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_UNIMPLEMENTED;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_INTERNAL_ERROR;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_UNAVAILABLE;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_DATA_LOSS;
constexpr Status_DeprecatedStatusCode Status::DEPRECATED_STATUS_CODE_UNAUTHENTICATED;
constexpr Status_DeprecatedStatusCode Status::DeprecatedStatusCode_MIN;
constexpr Status_DeprecatedStatusCode Status::DeprecatedStatusCode_MAX;
constexpr int Status::DeprecatedStatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto[2];
}
bool Status_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Status_StatusCode Status::STATUS_CODE_UNSET;
constexpr Status_StatusCode Status::STATUS_CODE_OK;
constexpr Status_StatusCode Status::STATUS_CODE_ERROR;
constexpr Status_StatusCode Status::StatusCode_MIN;
constexpr Status_StatusCode Status::StatusCode_MAX;
constexpr int Status::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ResourceSpans::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceSpans* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceSpans::_Internal::resource(const ResourceSpans* msg) {
  return *msg->resource_;
}
void ResourceSpans::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
ResourceSpans::ResourceSpans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumentation_library_spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.ResourceSpans)
}
ResourceSpans::ResourceSpans(const ResourceSpans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentation_library_spans_(from.instrumentation_library_spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resource()) {
    resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.ResourceSpans)
}

void ResourceSpans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  resource_ = nullptr;
}

ResourceSpans::~ResourceSpans() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.ResourceSpans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceSpans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resource_;
}

void ResourceSpans::ArenaDtor(void* object) {
  ResourceSpans* _this = reinterpret_cast< ResourceSpans* >(object);
  (void)_this;
}
void ResourceSpans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceSpans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceSpans& ResourceSpans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceSpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void ResourceSpans::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.ResourceSpans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentation_library_spans_.Clear();
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceSpans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentation_library_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceSpans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.ResourceSpans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource(this), target, stream);
  }

  // repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentation_library_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instrumentation_library_spans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.ResourceSpans)
  return target;
}

size_t ResourceSpans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.ResourceSpans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 2;
  total_size += 1UL * this->_internal_instrumentation_library_spans_size();
  for (const auto& msg : this->instrumentation_library_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceSpans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceSpans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceSpans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.ResourceSpans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.ResourceSpans)
    MergeFrom(*source);
  }
}

void ResourceSpans::MergeFrom(const ResourceSpans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentation_library_spans_.MergeFrom(from.instrumentation_library_spans_);
  if (from.has_resource()) {
    _internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(from._internal_resource());
  }
}

void ResourceSpans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSpans::CopyFrom(const ResourceSpans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.ResourceSpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSpans::IsInitialized() const {
  return true;
}

void ResourceSpans::InternalSwap(ResourceSpans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentation_library_spans_.InternalSwap(&other->instrumentation_library_spans_);
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceSpans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentationLibrarySpans::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library(const InstrumentationLibrarySpans* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationLibrary&
InstrumentationLibrarySpans::_Internal::instrumentation_library(const InstrumentationLibrarySpans* msg) {
  return *msg->instrumentation_library_;
}
void InstrumentationLibrarySpans::clear_instrumentation_library() {
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
}
InstrumentationLibrarySpans::InstrumentationLibrarySpans(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
}
InstrumentationLibrarySpans::InstrumentationLibrarySpans(const InstrumentationLibrarySpans& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spans_(from.spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_instrumentation_library()) {
    instrumentation_library_ = new ::opentelemetry::proto::common::v1::InstrumentationLibrary(*from.instrumentation_library_);
  } else {
    instrumentation_library_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
}

void InstrumentationLibrarySpans::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  instrumentation_library_ = nullptr;
}

InstrumentationLibrarySpans::~InstrumentationLibrarySpans() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentationLibrarySpans::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete instrumentation_library_;
}

void InstrumentationLibrarySpans::ArenaDtor(void* object) {
  InstrumentationLibrarySpans* _this = reinterpret_cast< InstrumentationLibrarySpans* >(object);
  (void)_this;
}
void InstrumentationLibrarySpans::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentationLibrarySpans::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentationLibrarySpans& InstrumentationLibrarySpans::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentationLibrarySpans_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void InstrumentationLibrarySpans::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spans_.Clear();
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibrarySpans::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentationLibrarySpans::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrumentation_library(this), target, stream);
  }

  // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_spans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  return target;
}

size_t InstrumentationLibrarySpans::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
  total_size += 1UL * this->_internal_spans_size();
  for (const auto& msg : this->spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrumentation_library_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentationLibrarySpans::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentationLibrarySpans* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentationLibrarySpans>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
    MergeFrom(*source);
  }
}

void InstrumentationLibrarySpans::MergeFrom(const InstrumentationLibrarySpans& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spans_.MergeFrom(from.spans_);
  if (from.has_instrumentation_library()) {
    _internal_mutable_instrumentation_library()->::opentelemetry::proto::common::v1::InstrumentationLibrary::MergeFrom(from._internal_instrumentation_library());
  }
}

void InstrumentationLibrarySpans::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentationLibrarySpans::CopyFrom(const InstrumentationLibrarySpans& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibrarySpans::IsInitialized() const {
  return true;
}

void InstrumentationLibrarySpans::InternalSwap(InstrumentationLibrarySpans* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spans_.InternalSwap(&other->spans_);
  swap(instrumentation_library_, other->instrumentation_library_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibrarySpans::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Span_Event::_Internal {
 public:
};

void Span_Event::clear_attributes() {
  attributes_.Clear();
}
Span_Event::Span_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span.Event)
}
Span_Event::Span_Event(const Span_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&time_unix_nano_, &from.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_attributes_count_) -
    reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(dropped_attributes_count_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span.Event)
}

void Span_Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dropped_attributes_count_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(dropped_attributes_count_));
}

Span_Event::~Span_Event() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Span_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Span_Event::ArenaDtor(void* object) {
  Span_Event* _this = reinterpret_cast< Span_Event* >(object);
  (void)_this;
}
void Span_Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Span_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Event& Span_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Span_Event_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  name_.ClearToEmpty();
  ::memset(&time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_attributes_count_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(dropped_attributes_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 time_unix_nano = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.trace.v1.Span.Event.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Span_Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 time_unix_nano = 1;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_time_unix_nano(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.trace.v1.Span.Event.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attributes(i), target, stream);
  }

  // uint32 dropped_attributes_count = 4;
  if (this->dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dropped_attributes_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span.Event)
  return target;
}

size_t Span_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // fixed64 time_unix_nano = 1;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // uint32 dropped_attributes_count = 4;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_attributes_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.Span.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Span_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.Span.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.Span.Event)
    MergeFrom(*source);
  }
}

void Span_Event::MergeFrom(const Span_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.dropped_attributes_count() != 0) {
    _internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
}

void Span_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.Span.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Event::CopyFrom(const Span_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Event::IsInitialized() const {
  return true;
}

void Span_Event::InternalSwap(Span_Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span_Event, dropped_attributes_count_)
      + sizeof(Span_Event::dropped_attributes_count_)
      - PROTOBUF_FIELD_OFFSET(Span_Event, time_unix_nano_)>(
          reinterpret_cast<char*>(&time_unix_nano_),
          reinterpret_cast<char*>(&other->time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Span_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Span_Link::_Internal {
 public:
};

void Span_Link::clear_attributes() {
  attributes_.Clear();
}
Span_Link::Span_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span.Link)
}
Span_Link::Span_Link(const Span_Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_state().empty()) {
    trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_state(), 
      GetArena());
  }
  dropped_attributes_count_ = from.dropped_attributes_count_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span.Link)
}

void Span_Link::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dropped_attributes_count_ = 0u;
}

Span_Link::~Span_Link() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span.Link)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Span_Link::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Span_Link::ArenaDtor(void* object) {
  Span_Link* _this = reinterpret_cast< Span_Link* >(object);
  (void)_this;
}
void Span_Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Span_Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span_Link& Span_Link::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Span_Link_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  trace_id_.ClearToEmpty();
  span_id_.ClearToEmpty();
  trace_state_.ClearToEmpty();
  dropped_attributes_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span_Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trace_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.trace.v1.Span.Link.trace_state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Span_Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // string trace_state = 3;
  if (this->trace_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_state().data(), static_cast<int>(this->_internal_trace_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.trace.v1.Span.Link.trace_state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trace_state(), target);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attributes(i), target, stream);
  }

  // uint32 dropped_attributes_count = 5;
  if (this->dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dropped_attributes_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span.Link)
  return target;
}

size_t Span_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // string trace_state = 3;
  if (this->trace_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_state());
  }

  // uint32 dropped_attributes_count = 5;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_attributes_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span_Link::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Span_Link* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Span_Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.Span.Link)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.Span.Link)
    MergeFrom(*source);
  }
}

void Span_Link::MergeFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_state().size() > 0) {
    _internal_set_trace_state(from._internal_trace_state());
  }
  if (from.dropped_attributes_count() != 0) {
    _internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
}

void Span_Link::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span_Link::CopyFrom(const Span_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span_Link::IsInitialized() const {
  return true;
}

void Span_Link::InternalSwap(Span_Link* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_state_.Swap(&other->trace_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dropped_attributes_count_, other->dropped_attributes_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Span_Link::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Span::_Internal {
 public:
  static const ::opentelemetry::proto::trace::v1::Status& status(const Span* msg);
};

const ::opentelemetry::proto::trace::v1::Status&
Span::_Internal::status(const Span* msg) {
  return *msg->status_;
}
void Span::clear_attributes() {
  attributes_.Clear();
}
Span::Span(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena),
  events_(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Span)
}
Span::Span(const Span& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_),
      events_(from.events_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_state().empty()) {
    trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_state(), 
      GetArena());
  }
  parent_span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_span_id().empty()) {
    parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent_span_id(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::opentelemetry::proto::trace::v1::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropped_links_count_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(dropped_links_count_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Span)
}

void Span::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dropped_links_count_) -
      reinterpret_cast<char*>(&status_)) + sizeof(dropped_links_count_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Span)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Span::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void Span::ArenaDtor(void* object) {
  Span* _this = reinterpret_cast< Span* >(object);
  (void)_this;
}
void Span::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Span::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Span& Span::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Span_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  events_.Clear();
  links_.Clear();
  trace_id_.ClearToEmpty();
  span_id_.ClearToEmpty();
  trace_state_.ClearToEmpty();
  parent_span_id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropped_links_count_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(dropped_links_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Span::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes trace_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trace_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.trace.v1.Span.trace_state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parent_span_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_parent_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.trace.v1.Span.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::opentelemetry::proto::trace::v1::Span_SpanKind>(val));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 end_time_unix_nano = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          end_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_attributes_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          dropped_attributes_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_events_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          dropped_events_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 dropped_links_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          dropped_links_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.trace.v1.Status status = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Span::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Span)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_trace_id(), target);
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_span_id(), target);
  }

  // string trace_state = 3;
  if (this->trace_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace_state().data(), static_cast<int>(this->_internal_trace_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.trace.v1.Span.trace_state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trace_state(), target);
  }

  // bytes parent_span_id = 4;
  if (this->parent_span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_parent_span_id(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.trace.v1.Span.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  if (this->kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_kind(), target);
  }

  // fixed64 start_time_unix_nano = 7;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 end_time_unix_nano = 8;
  if (this->end_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_end_time_unix_nano(), target);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attributes(i), target, stream);
  }

  // uint32 dropped_attributes_count = 10;
  if (this->dropped_attributes_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dropped_attributes_count(), target);
  }

  // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_events(i), target, stream);
  }

  // uint32 dropped_events_count = 12;
  if (this->dropped_events_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_dropped_events_count(), target);
  }

  // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_links(i), target, stream);
  }

  // uint32 dropped_links_count = 14;
  if (this->dropped_links_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_dropped_links_count(), target);
  }

  // .opentelemetry.proto.trace.v1.Status status = 15;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Span)
  return target;
}

size_t Span::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Span)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // bytes span_id = 2;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // string trace_state = 3;
  if (this->trace_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace_state());
  }

  // bytes parent_span_id = 4;
  if (this->parent_span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_span_id());
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .opentelemetry.proto.trace.v1.Status status = 15;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // fixed64 start_time_unix_nano = 7;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 end_time_unix_nano = 8;
  if (this->end_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // uint32 dropped_attributes_count = 10;
  if (this->dropped_attributes_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_attributes_count());
  }

  // uint32 dropped_events_count = 12;
  if (this->dropped_events_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_events_count());
  }

  // uint32 dropped_links_count = 14;
  if (this->dropped_links_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dropped_links_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Span::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  const Span* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Span>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.Span)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.Span)
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Span)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  events_.MergeFrom(from.events_);
  links_.MergeFrom(from.links_);
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_state().size() > 0) {
    _internal_set_trace_state(from._internal_trace_state());
  }
  if (from.parent_span_id().size() > 0) {
    _internal_set_parent_span_id(from._internal_parent_span_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::opentelemetry::proto::trace::v1::Status::MergeFrom(from._internal_status());
  }
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.end_time_unix_nano() != 0) {
    _internal_set_end_time_unix_nano(from._internal_end_time_unix_nano());
  }
  if (from.kind() != 0) {
    _internal_set_kind(from._internal_kind());
  }
  if (from.dropped_attributes_count() != 0) {
    _internal_set_dropped_attributes_count(from._internal_dropped_attributes_count());
  }
  if (from.dropped_events_count() != 0) {
    _internal_set_dropped_events_count(from._internal_dropped_events_count());
  }
  if (from.dropped_links_count() != 0) {
    _internal_set_dropped_links_count(from._internal_dropped_links_count());
  }
}

void Span::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  return true;
}

void Span::InternalSwap(Span* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  events_.InternalSwap(&other->events_);
  links_.InternalSwap(&other->links_);
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_state_.Swap(&other->trace_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parent_span_id_.Swap(&other->parent_span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Span, dropped_links_count_)
      + sizeof(Span::dropped_links_count_)
      - PROTOBUF_FIELD_OFFSET(Span, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Span::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.trace.v1.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&deprecated_code_, &from.deprecated_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&deprecated_code_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.trace.v1.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&deprecated_code_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&deprecated_code_)) + sizeof(code_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.trace.v1.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.trace.v1.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&deprecated_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&deprecated_code_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.trace.v1.Status.DeprecatedStatusCode deprecated_code = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_deprecated_code(static_cast<::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.trace.v1.Status.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::opentelemetry::proto::trace::v1::Status_StatusCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.trace.v1.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.trace.v1.Status.DeprecatedStatusCode deprecated_code = 1 [deprecated = true];
  if (this->deprecated_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_deprecated_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.trace.v1.Status.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.trace.v1.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.trace.v1.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .opentelemetry.proto.trace.v1.Status.DeprecatedStatusCode deprecated_code = 1 [deprecated = true];
  if (this->deprecated_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_deprecated_code());
  }

  // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.trace.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.trace.v1.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.trace.v1.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.trace.v1.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.deprecated_code() != 0) {
    _internal_set_deprecated_code(from._internal_deprecated_code());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.trace.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.trace.v1.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, code_)
      + sizeof(Status::code_)
      - PROTOBUF_FIELD_OFFSET(Status, deprecated_code_)>(
          reinterpret_cast<char*>(&deprecated_code_),
          reinterpret_cast<char*>(&other->deprecated_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::ResourceSpans* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::ResourceSpans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::ResourceSpans >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::Span_Event* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::Span_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::Span_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::Span_Link* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::Span_Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::Span_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::Span* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::Span >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::Span >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::trace::v1::Status* Arena::CreateMaybeMessage< ::opentelemetry::proto::trace::v1::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::trace::v1::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
