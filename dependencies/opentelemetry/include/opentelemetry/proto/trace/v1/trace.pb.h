// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/trace/v1/trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {
class InstrumentationLibrarySpans;
class InstrumentationLibrarySpansDefaultTypeInternal;
extern InstrumentationLibrarySpansDefaultTypeInternal _InstrumentationLibrarySpans_default_instance_;
class ResourceSpans;
class ResourceSpansDefaultTypeInternal;
extern ResourceSpansDefaultTypeInternal _ResourceSpans_default_instance_;
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
class Span_Event;
class Span_EventDefaultTypeInternal;
extern Span_EventDefaultTypeInternal _Span_Event_default_instance_;
class Span_Link;
class Span_LinkDefaultTypeInternal;
extern Span_LinkDefaultTypeInternal _Span_Link_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans>(Arena*);
template<> ::opentelemetry::proto::trace::v1::ResourceSpans* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::ResourceSpans>(Arena*);
template<> ::opentelemetry::proto::trace::v1::Span* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span>(Arena*);
template<> ::opentelemetry::proto::trace::v1::Span_Event* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span_Event>(Arena*);
template<> ::opentelemetry::proto::trace::v1::Span_Link* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Span_Link>(Arena*);
template<> ::opentelemetry::proto::trace::v1::Status* Arena::CreateMaybeMessage<::opentelemetry::proto::trace::v1::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace trace {
namespace v1 {

enum Span_SpanKind : int {
  Span_SpanKind_SPAN_KIND_UNSPECIFIED = 0,
  Span_SpanKind_SPAN_KIND_INTERNAL = 1,
  Span_SpanKind_SPAN_KIND_SERVER = 2,
  Span_SpanKind_SPAN_KIND_CLIENT = 3,
  Span_SpanKind_SPAN_KIND_PRODUCER = 4,
  Span_SpanKind_SPAN_KIND_CONSUMER = 5,
  Span_SpanKind_Span_SpanKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Span_SpanKind_Span_SpanKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Span_SpanKind_IsValid(int value);
constexpr Span_SpanKind Span_SpanKind_SpanKind_MIN = Span_SpanKind_SPAN_KIND_UNSPECIFIED;
constexpr Span_SpanKind Span_SpanKind_SpanKind_MAX = Span_SpanKind_SPAN_KIND_CONSUMER;
constexpr int Span_SpanKind_SpanKind_ARRAYSIZE = Span_SpanKind_SpanKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Span_SpanKind_descriptor();
template<typename T>
inline const std::string& Span_SpanKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Span_SpanKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Span_SpanKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Span_SpanKind_descriptor(), enum_t_value);
}
inline bool Span_SpanKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Span_SpanKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Span_SpanKind>(
    Span_SpanKind_descriptor(), name, value);
}
enum Status_DeprecatedStatusCode : int {
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_OK = 0,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_CANCELLED = 1,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNKNOWN_ERROR = 2,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_INVALID_ARGUMENT = 3,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED = 4,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_NOT_FOUND = 5,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_ALREADY_EXISTS = 6,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_PERMISSION_DENIED = 7,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED = 8,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_FAILED_PRECONDITION = 9,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_ABORTED = 10,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_OUT_OF_RANGE = 11,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNIMPLEMENTED = 12,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_INTERNAL_ERROR = 13,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNAVAILABLE = 14,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_DATA_LOSS = 15,
  Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNAUTHENTICATED = 16,
  Status_DeprecatedStatusCode_Status_DeprecatedStatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_DeprecatedStatusCode_Status_DeprecatedStatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_DeprecatedStatusCode_IsValid(int value);
constexpr Status_DeprecatedStatusCode Status_DeprecatedStatusCode_DeprecatedStatusCode_MIN = Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_OK;
constexpr Status_DeprecatedStatusCode Status_DeprecatedStatusCode_DeprecatedStatusCode_MAX = Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNAUTHENTICATED;
constexpr int Status_DeprecatedStatusCode_DeprecatedStatusCode_ARRAYSIZE = Status_DeprecatedStatusCode_DeprecatedStatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_DeprecatedStatusCode_descriptor();
template<typename T>
inline const std::string& Status_DeprecatedStatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_DeprecatedStatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_DeprecatedStatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_DeprecatedStatusCode_descriptor(), enum_t_value);
}
inline bool Status_DeprecatedStatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_DeprecatedStatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_DeprecatedStatusCode>(
    Status_DeprecatedStatusCode_descriptor(), name, value);
}
enum Status_StatusCode : int {
  Status_StatusCode_STATUS_CODE_UNSET = 0,
  Status_StatusCode_STATUS_CODE_OK = 1,
  Status_StatusCode_STATUS_CODE_ERROR = 2,
  Status_StatusCode_Status_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Status_StatusCode_Status_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Status_StatusCode_IsValid(int value);
constexpr Status_StatusCode Status_StatusCode_StatusCode_MIN = Status_StatusCode_STATUS_CODE_UNSET;
constexpr Status_StatusCode Status_StatusCode_StatusCode_MAX = Status_StatusCode_STATUS_CODE_ERROR;
constexpr int Status_StatusCode_StatusCode_ARRAYSIZE = Status_StatusCode_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_StatusCode_descriptor();
template<typename T>
inline const std::string& Status_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_StatusCode_descriptor(), enum_t_value);
}
inline bool Status_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status_StatusCode>(
    Status_StatusCode_descriptor(), name, value);
}
// ===================================================================

class ResourceSpans PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.ResourceSpans) */ {
 public:
  inline ResourceSpans() : ResourceSpans(nullptr) {}
  virtual ~ResourceSpans();

  ResourceSpans(const ResourceSpans& from);
  ResourceSpans(ResourceSpans&& from) noexcept
    : ResourceSpans() {
    *this = ::std::move(from);
  }

  inline ResourceSpans& operator=(const ResourceSpans& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceSpans& operator=(ResourceSpans&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceSpans& default_instance();

  static inline const ResourceSpans* internal_default_instance() {
    return reinterpret_cast<const ResourceSpans*>(
               &_ResourceSpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourceSpans& a, ResourceSpans& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceSpans* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceSpans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceSpans* New() const final {
    return CreateMaybeMessage<ResourceSpans>(nullptr);
  }

  ResourceSpans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceSpans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceSpans& from);
  void MergeFrom(const ResourceSpans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceSpans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.ResourceSpans";
  }
  protected:
  explicit ResourceSpans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentationLibrarySpansFieldNumber = 2,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 2;
  int instrumentation_library_spans_size() const;
  private:
  int _internal_instrumentation_library_spans_size() const;
  public:
  void clear_instrumentation_library_spans();
  ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* mutable_instrumentation_library_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >*
      mutable_instrumentation_library_spans();
  private:
  const ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans& _internal_instrumentation_library_spans(int index) const;
  ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* _internal_add_instrumentation_library_spans();
  public:
  const ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans& instrumentation_library_spans(int index) const;
  ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* add_instrumentation_library_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >&
      instrumentation_library_spans() const;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.ResourceSpans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans > instrumentation_library_spans_;
  ::opentelemetry::proto::resource::v1::Resource* resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class InstrumentationLibrarySpans PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans) */ {
 public:
  inline InstrumentationLibrarySpans() : InstrumentationLibrarySpans(nullptr) {}
  virtual ~InstrumentationLibrarySpans();

  InstrumentationLibrarySpans(const InstrumentationLibrarySpans& from);
  InstrumentationLibrarySpans(InstrumentationLibrarySpans&& from) noexcept
    : InstrumentationLibrarySpans() {
    *this = ::std::move(from);
  }

  inline InstrumentationLibrarySpans& operator=(const InstrumentationLibrarySpans& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentationLibrarySpans& operator=(InstrumentationLibrarySpans&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentationLibrarySpans& default_instance();

  static inline const InstrumentationLibrarySpans* internal_default_instance() {
    return reinterpret_cast<const InstrumentationLibrarySpans*>(
               &_InstrumentationLibrarySpans_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstrumentationLibrarySpans& a, InstrumentationLibrarySpans& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentationLibrarySpans* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentationLibrarySpans* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentationLibrarySpans* New() const final {
    return CreateMaybeMessage<InstrumentationLibrarySpans>(nullptr);
  }

  InstrumentationLibrarySpans* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentationLibrarySpans>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentationLibrarySpans& from);
  void MergeFrom(const InstrumentationLibrarySpans& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentationLibrarySpans* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.InstrumentationLibrarySpans";
  }
  protected:
  explicit InstrumentationLibrarySpans(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpansFieldNumber = 2,
    kInstrumentationLibraryFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.trace.v1.Span spans = 2;
  int spans_size() const;
  private:
  int _internal_spans_size() const;
  public:
  void clear_spans();
  ::opentelemetry::proto::trace::v1::Span* mutable_spans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >*
      mutable_spans();
  private:
  const ::opentelemetry::proto::trace::v1::Span& _internal_spans(int index) const;
  ::opentelemetry::proto::trace::v1::Span* _internal_add_spans();
  public:
  const ::opentelemetry::proto::trace::v1::Span& spans(int index) const;
  ::opentelemetry::proto::trace::v1::Span* add_spans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >&
      spans() const;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  bool has_instrumentation_library() const;
  private:
  bool _internal_has_instrumentation_library() const;
  public:
  void clear_instrumentation_library();
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* release_instrumentation_library();
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* mutable_instrumentation_library();
  void set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& _internal_instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* _internal_mutable_instrumentation_library();
  public:
  void unsafe_arena_set_allocated_instrumentation_library(
      ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* unsafe_arena_release_instrumentation_library();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span > spans_;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span.Event) */ {
 public:
  inline Span_Event() : Span_Event(nullptr) {}
  virtual ~Span_Event();

  Span_Event(const Span_Event& from);
  Span_Event(Span_Event&& from) noexcept
    : Span_Event() {
    *this = ::std::move(from);
  }

  inline Span_Event& operator=(const Span_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Event& operator=(Span_Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_Event& default_instance();

  static inline const Span_Event* internal_default_instance() {
    return reinterpret_cast<const Span_Event*>(
               &_Span_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Span_Event& a, Span_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_Event* New() const final {
    return CreateMaybeMessage<Span_Event>(nullptr);
  }

  Span_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_Event& from);
  void MergeFrom(const Span_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span.Event";
  }
  protected:
  explicit Span_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 3,
    kNameFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 1,
    kDroppedAttributesCountFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // fixed64 time_unix_nano = 1;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 dropped_attributes_count = 4;
  void clear_dropped_attributes_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span_Link PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span.Link) */ {
 public:
  inline Span_Link() : Span_Link(nullptr) {}
  virtual ~Span_Link();

  Span_Link(const Span_Link& from);
  Span_Link(Span_Link&& from) noexcept
    : Span_Link() {
    *this = ::std::move(from);
  }

  inline Span_Link& operator=(const Span_Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span_Link& operator=(Span_Link&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span_Link& default_instance();

  static inline const Span_Link* internal_default_instance() {
    return reinterpret_cast<const Span_Link*>(
               &_Span_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Span_Link& a, Span_Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Span_Link* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span_Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span_Link* New() const final {
    return CreateMaybeMessage<Span_Link>(nullptr);
  }

  Span_Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span_Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span_Link& from);
  void MergeFrom(const Span_Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span_Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span.Link";
  }
  protected:
  explicit Span_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kTraceStateFieldNumber = 3,
    kDroppedAttributesCountFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // bytes trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // bytes span_id = 2;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // string trace_state = 3;
  void clear_trace_state();
  const std::string& trace_state() const;
  void set_trace_state(const std::string& value);
  void set_trace_state(std::string&& value);
  void set_trace_state(const char* value);
  void set_trace_state(const char* value, size_t size);
  std::string* mutable_trace_state();
  std::string* release_trace_state();
  void set_allocated_trace_state(std::string* trace_state);
  private:
  const std::string& _internal_trace_state() const;
  void _internal_set_trace_state(const std::string& value);
  std::string* _internal_mutable_trace_state();
  public:

  // uint32 dropped_attributes_count = 5;
  void clear_dropped_attributes_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Span PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Span) */ {
 public:
  inline Span() : Span(nullptr) {}
  virtual ~Span();

  Span(const Span& from);
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  inline Span& operator=(Span&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Span& default_instance();

  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }
  inline void Swap(Span* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Span* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.Span";
  }
  protected:
  explicit Span(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Span_Event Event;
  typedef Span_Link Link;

  typedef Span_SpanKind SpanKind;
  static constexpr SpanKind SPAN_KIND_UNSPECIFIED =
    Span_SpanKind_SPAN_KIND_UNSPECIFIED;
  static constexpr SpanKind SPAN_KIND_INTERNAL =
    Span_SpanKind_SPAN_KIND_INTERNAL;
  static constexpr SpanKind SPAN_KIND_SERVER =
    Span_SpanKind_SPAN_KIND_SERVER;
  static constexpr SpanKind SPAN_KIND_CLIENT =
    Span_SpanKind_SPAN_KIND_CLIENT;
  static constexpr SpanKind SPAN_KIND_PRODUCER =
    Span_SpanKind_SPAN_KIND_PRODUCER;
  static constexpr SpanKind SPAN_KIND_CONSUMER =
    Span_SpanKind_SPAN_KIND_CONSUMER;
  static inline bool SpanKind_IsValid(int value) {
    return Span_SpanKind_IsValid(value);
  }
  static constexpr SpanKind SpanKind_MIN =
    Span_SpanKind_SpanKind_MIN;
  static constexpr SpanKind SpanKind_MAX =
    Span_SpanKind_SpanKind_MAX;
  static constexpr int SpanKind_ARRAYSIZE =
    Span_SpanKind_SpanKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SpanKind_descriptor() {
    return Span_SpanKind_descriptor();
  }
  template<typename T>
  static inline const std::string& SpanKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SpanKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SpanKind_Name.");
    return Span_SpanKind_Name(enum_t_value);
  }
  static inline bool SpanKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SpanKind* value) {
    return Span_SpanKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 9,
    kEventsFieldNumber = 11,
    kLinksFieldNumber = 13,
    kTraceIdFieldNumber = 1,
    kSpanIdFieldNumber = 2,
    kTraceStateFieldNumber = 3,
    kParentSpanIdFieldNumber = 4,
    kNameFieldNumber = 5,
    kStatusFieldNumber = 15,
    kStartTimeUnixNanoFieldNumber = 7,
    kEndTimeUnixNanoFieldNumber = 8,
    kKindFieldNumber = 6,
    kDroppedAttributesCountFieldNumber = 10,
    kDroppedEventsCountFieldNumber = 12,
    kDroppedLinksCountFieldNumber = 14,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::opentelemetry::proto::trace::v1::Span_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >*
      mutable_events();
  private:
  const ::opentelemetry::proto::trace::v1::Span_Event& _internal_events(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Event* _internal_add_events();
  public:
  const ::opentelemetry::proto::trace::v1::Span_Event& events(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >&
      events() const;

  // repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
  int links_size() const;
  private:
  int _internal_links_size() const;
  public:
  void clear_links();
  ::opentelemetry::proto::trace::v1::Span_Link* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >*
      mutable_links();
  private:
  const ::opentelemetry::proto::trace::v1::Span_Link& _internal_links(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Link* _internal_add_links();
  public:
  const ::opentelemetry::proto::trace::v1::Span_Link& links(int index) const;
  ::opentelemetry::proto::trace::v1::Span_Link* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >&
      links() const;

  // bytes trace_id = 1;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // bytes span_id = 2;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // string trace_state = 3;
  void clear_trace_state();
  const std::string& trace_state() const;
  void set_trace_state(const std::string& value);
  void set_trace_state(std::string&& value);
  void set_trace_state(const char* value);
  void set_trace_state(const char* value, size_t size);
  std::string* mutable_trace_state();
  std::string* release_trace_state();
  void set_allocated_trace_state(std::string* trace_state);
  private:
  const std::string& _internal_trace_state() const;
  void _internal_set_trace_state(const std::string& value);
  std::string* _internal_mutable_trace_state();
  public:

  // bytes parent_span_id = 4;
  void clear_parent_span_id();
  const std::string& parent_span_id() const;
  void set_parent_span_id(const std::string& value);
  void set_parent_span_id(std::string&& value);
  void set_parent_span_id(const char* value);
  void set_parent_span_id(const void* value, size_t size);
  std::string* mutable_parent_span_id();
  std::string* release_parent_span_id();
  void set_allocated_parent_span_id(std::string* parent_span_id);
  private:
  const std::string& _internal_parent_span_id() const;
  void _internal_set_parent_span_id(const std::string& value);
  std::string* _internal_mutable_parent_span_id();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .opentelemetry.proto.trace.v1.Status status = 15;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::opentelemetry::proto::trace::v1::Status& status() const;
  ::opentelemetry::proto::trace::v1::Status* release_status();
  ::opentelemetry::proto::trace::v1::Status* mutable_status();
  void set_allocated_status(::opentelemetry::proto::trace::v1::Status* status);
  private:
  const ::opentelemetry::proto::trace::v1::Status& _internal_status() const;
  ::opentelemetry::proto::trace::v1::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::opentelemetry::proto::trace::v1::Status* status);
  ::opentelemetry::proto::trace::v1::Status* unsafe_arena_release_status();

  // fixed64 start_time_unix_nano = 7;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 end_time_unix_nano = 8;
  void clear_end_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_unix_nano() const;
  void set_end_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time_unix_nano() const;
  void _internal_set_end_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
  void clear_kind();
  ::opentelemetry::proto::trace::v1::Span_SpanKind kind() const;
  void set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value);
  private:
  ::opentelemetry::proto::trace::v1::Span_SpanKind _internal_kind() const;
  void _internal_set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value);
  public:

  // uint32 dropped_attributes_count = 10;
  void clear_dropped_attributes_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count() const;
  void set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_attributes_count() const;
  void _internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dropped_events_count = 12;
  void clear_dropped_events_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_events_count() const;
  void set_dropped_events_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_events_count() const;
  void _internal_set_dropped_events_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dropped_links_count = 14;
  void clear_dropped_links_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_links_count() const;
  void set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropped_links_count() const;
  void _internal_set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Span)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link > links_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::opentelemetry::proto::trace::v1::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_unix_nano_;
  int kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_attributes_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_events_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropped_links_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.trace.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.trace.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Status_DeprecatedStatusCode DeprecatedStatusCode;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_OK =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_OK;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_CANCELLED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_CANCELLED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_UNKNOWN_ERROR =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNKNOWN_ERROR;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_INVALID_ARGUMENT =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_INVALID_ARGUMENT;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_DEADLINE_EXCEEDED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_NOT_FOUND =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_NOT_FOUND;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_ALREADY_EXISTS =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_ALREADY_EXISTS;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_PERMISSION_DENIED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_PERMISSION_DENIED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_RESOURCE_EXHAUSTED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_FAILED_PRECONDITION =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_FAILED_PRECONDITION;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_ABORTED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_ABORTED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_OUT_OF_RANGE =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_OUT_OF_RANGE;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_UNIMPLEMENTED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNIMPLEMENTED;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_INTERNAL_ERROR =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_INTERNAL_ERROR;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_UNAVAILABLE =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNAVAILABLE;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_DATA_LOSS =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_DATA_LOSS;
  static constexpr DeprecatedStatusCode DEPRECATED_STATUS_CODE_UNAUTHENTICATED =
    Status_DeprecatedStatusCode_DEPRECATED_STATUS_CODE_UNAUTHENTICATED;
  static inline bool DeprecatedStatusCode_IsValid(int value) {
    return Status_DeprecatedStatusCode_IsValid(value);
  }
  static constexpr DeprecatedStatusCode DeprecatedStatusCode_MIN =
    Status_DeprecatedStatusCode_DeprecatedStatusCode_MIN;
  static constexpr DeprecatedStatusCode DeprecatedStatusCode_MAX =
    Status_DeprecatedStatusCode_DeprecatedStatusCode_MAX;
  static constexpr int DeprecatedStatusCode_ARRAYSIZE =
    Status_DeprecatedStatusCode_DeprecatedStatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeprecatedStatusCode_descriptor() {
    return Status_DeprecatedStatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& DeprecatedStatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeprecatedStatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeprecatedStatusCode_Name.");
    return Status_DeprecatedStatusCode_Name(enum_t_value);
  }
  static inline bool DeprecatedStatusCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DeprecatedStatusCode* value) {
    return Status_DeprecatedStatusCode_Parse(name, value);
  }

  typedef Status_StatusCode StatusCode;
  static constexpr StatusCode STATUS_CODE_UNSET =
    Status_StatusCode_STATUS_CODE_UNSET;
  static constexpr StatusCode STATUS_CODE_OK =
    Status_StatusCode_STATUS_CODE_OK;
  static constexpr StatusCode STATUS_CODE_ERROR =
    Status_StatusCode_STATUS_CODE_ERROR;
  static inline bool StatusCode_IsValid(int value) {
    return Status_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    Status_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    Status_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    Status_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusCode_descriptor() {
    return Status_StatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return Status_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusCode* value) {
    return Status_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDeprecatedCodeFieldNumber = 1,
    kCodeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .opentelemetry.proto.trace.v1.Status.DeprecatedStatusCode deprecated_code = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_deprecated_code();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode deprecated_code() const;
  PROTOBUF_DEPRECATED void set_deprecated_code(::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode value);
  private:
  ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode _internal_deprecated_code() const;
  void _internal_set_deprecated_code(::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode value);
  public:

  // .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
  void clear_code();
  ::opentelemetry::proto::trace::v1::Status_StatusCode code() const;
  void set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value);
  private:
  ::opentelemetry::proto::trace::v1::Status_StatusCode _internal_code() const;
  void _internal_set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.trace.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int deprecated_code_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourceSpans

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceSpans::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool ResourceSpans::has_resource() const {
  return _internal_has_resource();
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceSpans::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(
      ::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceSpans::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  return _internal_resource();
}
inline void ResourceSpans::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.ResourceSpans.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::release_resource() {
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceSpans::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ResourceSpans.resource)
  return _internal_mutable_resource();
}
inline void ResourceSpans::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.ResourceSpans.resource)
}

// repeated .opentelemetry.proto.trace.v1.InstrumentationLibrarySpans instrumentation_library_spans = 2;
inline int ResourceSpans::_internal_instrumentation_library_spans_size() const {
  return instrumentation_library_spans_.size();
}
inline int ResourceSpans::instrumentation_library_spans_size() const {
  return _internal_instrumentation_library_spans_size();
}
inline void ResourceSpans::clear_instrumentation_library_spans() {
  instrumentation_library_spans_.Clear();
}
inline ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* ResourceSpans::mutable_instrumentation_library_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.ResourceSpans.instrumentation_library_spans)
  return instrumentation_library_spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >*
ResourceSpans::mutable_instrumentation_library_spans() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.ResourceSpans.instrumentation_library_spans)
  return &instrumentation_library_spans_;
}
inline const ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans& ResourceSpans::_internal_instrumentation_library_spans(int index) const {
  return instrumentation_library_spans_.Get(index);
}
inline const ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans& ResourceSpans::instrumentation_library_spans(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.ResourceSpans.instrumentation_library_spans)
  return _internal_instrumentation_library_spans(index);
}
inline ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* ResourceSpans::_internal_add_instrumentation_library_spans() {
  return instrumentation_library_spans_.Add();
}
inline ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans* ResourceSpans::add_instrumentation_library_spans() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.ResourceSpans.instrumentation_library_spans)
  return _internal_add_instrumentation_library_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::InstrumentationLibrarySpans >&
ResourceSpans::instrumentation_library_spans() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.ResourceSpans.instrumentation_library_spans)
  return instrumentation_library_spans_;
}

// -------------------------------------------------------------------

// InstrumentationLibrarySpans

// .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
inline bool InstrumentationLibrarySpans::_internal_has_instrumentation_library() const {
  return this != internal_default_instance() && instrumentation_library_ != nullptr;
}
inline bool InstrumentationLibrarySpans::has_instrumentation_library() const {
  return _internal_has_instrumentation_library();
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibrarySpans::_internal_instrumentation_library() const {
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary* p = instrumentation_library_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationLibrary&>(
      ::opentelemetry::proto::common::v1::_InstrumentationLibrary_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibrarySpans::instrumentation_library() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.instrumentation_library)
  return _internal_instrumentation_library();
}
inline void InstrumentationLibrarySpans::unsafe_arena_set_allocated_instrumentation_library(
    ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  instrumentation_library_ = instrumentation_library;
  if (instrumentation_library) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.instrumentation_library)
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibrarySpans::release_instrumentation_library() {
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibrarySpans::unsafe_arena_release_instrumentation_library() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.instrumentation_library)
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibrarySpans::_internal_mutable_instrumentation_library() {
  
  if (instrumentation_library_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationLibrary>(GetArena());
    instrumentation_library_ = p;
  }
  return instrumentation_library_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibrarySpans::mutable_instrumentation_library() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.instrumentation_library)
  return _internal_mutable_instrumentation_library();
}
inline void InstrumentationLibrarySpans::set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  if (instrumentation_library) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library)->GetArena();
    if (message_arena != submessage_arena) {
      instrumentation_library = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrumentation_library, submessage_arena);
    }
    
  } else {
    
  }
  instrumentation_library_ = instrumentation_library;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.instrumentation_library)
}

// repeated .opentelemetry.proto.trace.v1.Span spans = 2;
inline int InstrumentationLibrarySpans::_internal_spans_size() const {
  return spans_.size();
}
inline int InstrumentationLibrarySpans::spans_size() const {
  return _internal_spans_size();
}
inline void InstrumentationLibrarySpans::clear_spans() {
  spans_.Clear();
}
inline ::opentelemetry::proto::trace::v1::Span* InstrumentationLibrarySpans::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.spans)
  return spans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >*
InstrumentationLibrarySpans::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.spans)
  return &spans_;
}
inline const ::opentelemetry::proto::trace::v1::Span& InstrumentationLibrarySpans::_internal_spans(int index) const {
  return spans_.Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span& InstrumentationLibrarySpans::spans(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.spans)
  return _internal_spans(index);
}
inline ::opentelemetry::proto::trace::v1::Span* InstrumentationLibrarySpans::_internal_add_spans() {
  return spans_.Add();
}
inline ::opentelemetry::proto::trace::v1::Span* InstrumentationLibrarySpans::add_spans() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.spans)
  return _internal_add_spans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span >&
InstrumentationLibrarySpans::spans() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.InstrumentationLibrarySpans.spans)
  return spans_;
}

// -------------------------------------------------------------------

// Span_Event

// fixed64 time_unix_nano = 1;
inline void Span_Event::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span_Event::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span_Event::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void Span_Event::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void Span_Event::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.time_unix_nano)
}

// string name = 2;
inline void Span_Event::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Span_Event::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.name)
  return _internal_name();
}
inline void Span_Event::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.name)
}
inline std::string* Span_Event::mutable_name() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Event.name)
  return _internal_mutable_name();
}
inline const std::string& Span_Event::_internal_name() const {
  return name_.Get();
}
inline void Span_Event::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Event::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.Event.name)
}
inline void Span_Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.Event.name)
}
inline void Span_Event::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.Event.name)
}
inline std::string* Span_Event::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Event::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Event.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Event.name)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
inline int Span_Event::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Span_Event::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span_Event::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Event::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Event::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Event::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span_Event::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.Event.attributes)
  return attributes_;
}

// uint32 dropped_attributes_count = 4;
inline void Span_Event::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span_Event::_internal_dropped_attributes_count() const {
  return dropped_attributes_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span_Event::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Event.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span_Event::_internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_attributes_count_ = value;
}
inline void Span_Event::set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Event.dropped_attributes_count)
}

// -------------------------------------------------------------------

// Span_Link

// bytes trace_id = 1;
inline void Span_Link::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& Span_Link::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return _internal_trace_id();
}
inline void Span_Link::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}
inline std::string* Span_Link::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Span_Link::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Span_Link::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Link::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}
inline void Span_Link::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}
inline void Span_Link::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}
inline std::string* Span_Link::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Link::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Link::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.trace_id)
}

// bytes span_id = 2;
inline void Span_Link::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& Span_Link::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return _internal_span_id();
}
inline void Span_Link::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.span_id)
}
inline std::string* Span_Link::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Span_Link::_internal_span_id() const {
  return span_id_.Get();
}
inline void Span_Link::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Link::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.Link.span_id)
}
inline void Span_Link::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.Link.span_id)
}
inline void Span_Link::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.Link.span_id)
}
inline std::string* Span_Link::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Link::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Link::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.span_id)
}

// string trace_state = 3;
inline void Span_Link::clear_trace_state() {
  trace_state_.ClearToEmpty();
}
inline const std::string& Span_Link::trace_state() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return _internal_trace_state();
}
inline void Span_Link::set_trace_state(const std::string& value) {
  _internal_set_trace_state(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}
inline std::string* Span_Link::mutable_trace_state() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return _internal_mutable_trace_state();
}
inline const std::string& Span_Link::_internal_trace_state() const {
  return trace_state_.Get();
}
inline void Span_Link::_internal_set_trace_state(const std::string& value) {
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span_Link::set_trace_state(std::string&& value) {
  
  trace_state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}
inline void Span_Link::set_trace_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}
inline void Span_Link::set_trace_state(const char* value,
    size_t size) {
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}
inline std::string* Span_Link::_internal_mutable_trace_state() {
  
  return trace_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span_Link::release_trace_state() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.Link.trace_state)
  return trace_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span_Link::set_allocated_trace_state(std::string* trace_state) {
  if (trace_state != nullptr) {
    
  } else {
    
  }
  trace_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.Link.trace_state)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 4;
inline int Span_Link::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Span_Link::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span_Link::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Link::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span_Link::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span_Link::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span_Link::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.Link.attributes)
  return attributes_;
}

// uint32 dropped_attributes_count = 5;
inline void Span_Link::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span_Link::_internal_dropped_attributes_count() const {
  return dropped_attributes_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span_Link::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.Link.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span_Link::_internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_attributes_count_ = value;
}
inline void Span_Link::set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.Link.dropped_attributes_count)
}

// -------------------------------------------------------------------

// Span

// bytes trace_id = 1;
inline void Span::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& Span::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.trace_id)
  return _internal_trace_id();
}
inline void Span::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.trace_id)
}
inline std::string* Span::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Span::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Span::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.trace_id)
}
inline void Span::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.trace_id)
}
inline void Span::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.trace_id)
}
inline std::string* Span::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.trace_id)
}

// bytes span_id = 2;
inline void Span::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& Span::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.span_id)
  return _internal_span_id();
}
inline void Span::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.span_id)
}
inline std::string* Span::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Span::_internal_span_id() const {
  return span_id_.Get();
}
inline void Span::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.span_id)
}
inline void Span::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.span_id)
}
inline void Span::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.span_id)
}
inline std::string* Span::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.span_id)
}

// string trace_state = 3;
inline void Span::clear_trace_state() {
  trace_state_.ClearToEmpty();
}
inline const std::string& Span::trace_state() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.trace_state)
  return _internal_trace_state();
}
inline void Span::set_trace_state(const std::string& value) {
  _internal_set_trace_state(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.trace_state)
}
inline std::string* Span::mutable_trace_state() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.trace_state)
  return _internal_mutable_trace_state();
}
inline const std::string& Span::_internal_trace_state() const {
  return trace_state_.Get();
}
inline void Span::_internal_set_trace_state(const std::string& value) {
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_trace_state(std::string&& value) {
  
  trace_state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.trace_state)
}
inline void Span::set_trace_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.trace_state)
}
inline void Span::set_trace_state(const char* value,
    size_t size) {
  
  trace_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.trace_state)
}
inline std::string* Span::_internal_mutable_trace_state() {
  
  return trace_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_trace_state() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.trace_state)
  return trace_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_trace_state(std::string* trace_state) {
  if (trace_state != nullptr) {
    
  } else {
    
  }
  trace_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.trace_state)
}

// bytes parent_span_id = 4;
inline void Span::clear_parent_span_id() {
  parent_span_id_.ClearToEmpty();
}
inline const std::string& Span::parent_span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return _internal_parent_span_id();
}
inline void Span::set_parent_span_id(const std::string& value) {
  _internal_set_parent_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.parent_span_id)
}
inline std::string* Span::mutable_parent_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return _internal_mutable_parent_span_id();
}
inline const std::string& Span::_internal_parent_span_id() const {
  return parent_span_id_.Get();
}
inline void Span::_internal_set_parent_span_id(const std::string& value) {
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_parent_span_id(std::string&& value) {
  
  parent_span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.parent_span_id)
}
inline void Span::set_parent_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.parent_span_id)
}
inline void Span::set_parent_span_id(const void* value,
    size_t size) {
  
  parent_span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.parent_span_id)
}
inline std::string* Span::_internal_mutable_parent_span_id() {
  
  return parent_span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_parent_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.parent_span_id)
  return parent_span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_parent_span_id(std::string* parent_span_id) {
  if (parent_span_id != nullptr) {
    
  } else {
    
  }
  parent_span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.parent_span_id)
}

// string name = 5;
inline void Span::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Span::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.name)
  return _internal_name();
}
inline void Span::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.name)
}
inline std::string* Span::mutable_name() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.name)
  return _internal_mutable_name();
}
inline const std::string& Span::_internal_name() const {
  return name_.Get();
}
inline void Span::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Span::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Span.name)
}
inline void Span::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Span.name)
}
inline void Span::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Span.name)
}
inline std::string* Span::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Span::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Span::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.name)
}

// .opentelemetry.proto.trace.v1.Span.SpanKind kind = 6;
inline void Span::clear_kind() {
  kind_ = 0;
}
inline ::opentelemetry::proto::trace::v1::Span_SpanKind Span::_internal_kind() const {
  return static_cast< ::opentelemetry::proto::trace::v1::Span_SpanKind >(kind_);
}
inline ::opentelemetry::proto::trace::v1::Span_SpanKind Span::kind() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.kind)
  return _internal_kind();
}
inline void Span::_internal_set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value) {
  
  kind_ = value;
}
inline void Span::set_kind(::opentelemetry::proto::trace::v1::Span_SpanKind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.kind)
}

// fixed64 start_time_unix_nano = 7;
inline void Span::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void Span::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void Span::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.start_time_unix_nano)
}

// fixed64 end_time_unix_nano = 8;
inline void Span::clear_end_time_unix_nano() {
  end_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::_internal_end_time_unix_nano() const {
  return end_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Span::end_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.end_time_unix_nano)
  return _internal_end_time_unix_nano();
}
inline void Span::_internal_set_end_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_unix_nano_ = value;
}
inline void Span::set_end_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.end_time_unix_nano)
}

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
inline int Span::_internal_attributes_size() const {
  return attributes_.size();
}
inline int Span::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Span::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Span::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Span::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Span::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.attributes)
  return attributes_;
}

// uint32 dropped_attributes_count = 10;
inline void Span::clear_dropped_attributes_count() {
  dropped_attributes_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::_internal_dropped_attributes_count() const {
  return dropped_attributes_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::dropped_attributes_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_attributes_count)
  return _internal_dropped_attributes_count();
}
inline void Span::_internal_set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_attributes_count_ = value;
}
inline void Span::set_dropped_attributes_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_attributes_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_attributes_count)
}

// repeated .opentelemetry.proto.trace.v1.Span.Event events = 11;
inline int Span::_internal_events_size() const {
  return events_.size();
}
inline int Span::events_size() const {
  return _internal_events_size();
}
inline void Span::clear_events() {
  events_.Clear();
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >*
Span::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.events)
  return &events_;
}
inline const ::opentelemetry::proto::trace::v1::Span_Event& Span::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span_Event& Span::events(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.events)
  return _internal_events(index);
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::_internal_add_events() {
  return events_.Add();
}
inline ::opentelemetry::proto::trace::v1::Span_Event* Span::add_events() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Event >&
Span::events() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.events)
  return events_;
}

// uint32 dropped_events_count = 12;
inline void Span::clear_dropped_events_count() {
  dropped_events_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::_internal_dropped_events_count() const {
  return dropped_events_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::dropped_events_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_events_count)
  return _internal_dropped_events_count();
}
inline void Span::_internal_set_dropped_events_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_events_count_ = value;
}
inline void Span::set_dropped_events_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_events_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_events_count)
}

// repeated .opentelemetry.proto.trace.v1.Span.Link links = 13;
inline int Span::_internal_links_size() const {
  return links_.size();
}
inline int Span::links_size() const {
  return _internal_links_size();
}
inline void Span::clear_links() {
  links_.Clear();
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >*
Span::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.trace.v1.Span.links)
  return &links_;
}
inline const ::opentelemetry::proto::trace::v1::Span_Link& Span::_internal_links(int index) const {
  return links_.Get(index);
}
inline const ::opentelemetry::proto::trace::v1::Span_Link& Span::links(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.links)
  return _internal_links(index);
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::_internal_add_links() {
  return links_.Add();
}
inline ::opentelemetry::proto::trace::v1::Span_Link* Span::add_links() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.trace.v1.Span.links)
  return _internal_add_links();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::trace::v1::Span_Link >&
Span::links() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.trace.v1.Span.links)
  return links_;
}

// uint32 dropped_links_count = 14;
inline void Span::clear_dropped_links_count() {
  dropped_links_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::_internal_dropped_links_count() const {
  return dropped_links_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Span::dropped_links_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.dropped_links_count)
  return _internal_dropped_links_count();
}
inline void Span::_internal_set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropped_links_count_ = value;
}
inline void Span::set_dropped_links_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropped_links_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Span.dropped_links_count)
}

// .opentelemetry.proto.trace.v1.Status status = 15;
inline bool Span::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Span::has_status() const {
  return _internal_has_status();
}
inline void Span::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::opentelemetry::proto::trace::v1::Status& Span::_internal_status() const {
  const ::opentelemetry::proto::trace::v1::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::trace::v1::Status&>(
      ::opentelemetry::proto::trace::v1::_Status_default_instance_);
}
inline const ::opentelemetry::proto::trace::v1::Status& Span::status() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Span.status)
  return _internal_status();
}
inline void Span::unsafe_arena_set_allocated_status(
    ::opentelemetry::proto::trace::v1::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.trace.v1.Span.status)
}
inline ::opentelemetry::proto::trace::v1::Status* Span::release_status() {
  
  ::opentelemetry::proto::trace::v1::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Span.status)
  
  ::opentelemetry::proto::trace::v1::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::trace::v1::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::opentelemetry::proto::trace::v1::Status* Span::mutable_status() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Span.status)
  return _internal_mutable_status();
}
inline void Span::set_allocated_status(::opentelemetry::proto::trace::v1::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Span.status)
}

// -------------------------------------------------------------------

// Status

// .opentelemetry.proto.trace.v1.Status.DeprecatedStatusCode deprecated_code = 1 [deprecated = true];
inline void Status::clear_deprecated_code() {
  deprecated_code_ = 0;
}
inline ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode Status::_internal_deprecated_code() const {
  return static_cast< ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode >(deprecated_code_);
}
inline ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode Status::deprecated_code() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Status.deprecated_code)
  return _internal_deprecated_code();
}
inline void Status::_internal_set_deprecated_code(::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode value) {
  
  deprecated_code_ = value;
}
inline void Status::set_deprecated_code(::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode value) {
  _internal_set_deprecated_code(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Status.deprecated_code)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Status.message)
  return _internal_message();
}
inline void Status::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Status.message)
}
inline std::string* Status::mutable_message() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.trace.v1.Status.message)
  return _internal_mutable_message();
}
inline const std::string& Status::_internal_message() const {
  return message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.trace.v1.Status.message)
}
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.trace.v1.Status.message)
}
inline void Status::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.trace.v1.Status.message)
}
inline std::string* Status::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.trace.v1.Status.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.trace.v1.Status.message)
}

// .opentelemetry.proto.trace.v1.Status.StatusCode code = 3;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::opentelemetry::proto::trace::v1::Status_StatusCode Status::_internal_code() const {
  return static_cast< ::opentelemetry::proto::trace::v1::Status_StatusCode >(code_);
}
inline ::opentelemetry::proto::trace::v1::Status_StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.trace.v1.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value) {
  
  code_ = value;
}
inline void Status::set_code(::opentelemetry::proto::trace::v1::Status_StatusCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.trace.v1.Status.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace trace
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::trace::v1::Span_SpanKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::trace::v1::Span_SpanKind>() {
  return ::opentelemetry::proto::trace::v1::Span_SpanKind_descriptor();
}
template <> struct is_proto_enum< ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode>() {
  return ::opentelemetry::proto::trace::v1::Status_DeprecatedStatusCode_descriptor();
}
template <> struct is_proto_enum< ::opentelemetry::proto::trace::v1::Status_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::trace::v1::Status_StatusCode>() {
  return ::opentelemetry::proto::trace::v1::Status_StatusCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2ftrace_2fv1_2ftrace_2eproto
